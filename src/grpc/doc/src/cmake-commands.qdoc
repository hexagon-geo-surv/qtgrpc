// Copyright (C) 2022 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only

/*!
\group cmake-commands-qtgrpc
\title CMake Commands in Qt6 GRPC

The following CMake commands are defined when Qt6::Protobuf is loaded, for
instance with:

\code
find_package(Qt6 REQUIRED COMPONENTS Protobuf)
\endcode

Additionally, to find the Qt GRPC module, use CMake command:
\code
find_package(Qt6 REQUIRED COMPONENTS Grpc)
\endcode

To generate gRPC services using Qt GRPC and link them with your program consider
the following example:

\code
cmake_minimum_required(VERSION 3.16...3.22)
project(MyProject)

find_package(Qt6 REQUIRED COMPONENTS Grpc Protobuf)
qt_standard_project_setup()

qt_add_grpc(MyGrpcClient CLIENT
    PROTO_FILES
        path/to/service.proto
        path/to/message.proto
        path/to/other_message.proto
    PROTO_INCLUDES
        /path/to/proto/include
)
target_link_libraries(MyGrpcClient PRIVATE Qt6::Grpc)

qt_add_executable(MyApp main.cpp)

target_link_libraries(MyApp PRIVATE MyGrpcClient)
\endcode

In the example above, you call the \c{qt_add_protobuf()}
CMake function to generate a library called \c{MyGrpcClient}.
Then you link the generated library with \c{Qt6::Grpc} library.

We then create a target for an executable called \c{MyApp} which we link
to the \c{MyGrpcClient} library.

\sa{CMake Commands in Qt6 Protobuf}
*/
