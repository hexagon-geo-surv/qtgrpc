// Copyright (C) 2022 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only

/*!
\page qt_add_protobuf.html
\ingroup cmake-commands-qtprotobuf

\title qt_add_protobuf
\target qt6_add_protobuf
\summary {Generates Qt-based C++ source code using a protobuf schema}
\preliminarycmakecommand
\cmakecommandsince 6.5

Usually \c{qtprotobufgen} would be invoked through \c cmake using the
\c{qt_add_protobuf} macro.

\badcode
    qt_add_protobuf(<target>
        [COMMENTS] [FOLDER] [FIELD_ENUM]
        [OUTPUT_DIRECTORY ""]
        [EXTRA_NAMESPACE ""]
        [OUT_GENERATED_HEADERS <var>]
        [OUT_GENERATED_TARGETS <var>]
        [PROTO_INCLUDES "<path>" [...]]
        PROTO_FILES "<file>" [...]
    )
\endcode

The source files generated by \c{qtprotobufgen} are then added to the target.
If the target already exists the files are \e{added} to the target source
list. If the target doesn't exist it is created as a library which you must
then link to.

\section1 Arguments
\list
\li \c{OUT_GENERATED_HEADERS} can be used to specify a variable which will
hold the list of generated headers.
\li \c{OUT_GENERATED_TARGETS} can be used to specify a variable which will
hold the list of generated targets.
\li \c{PROTO_FILES} is the list of \c{.proto} files that will be used in the
generation procedure.
\li \c{PROTO_INCLUDES} is the list of directories which will be searched for
dependencies.
\li \c{OUTPUT_DIRECTORY} is the directory where the generated files will be
put. By default, the current directory (while evaluating the function) is
used.
\include qtprotobufgen-options.qdocinc
\endlist

\sa{The qtprotobufgen Tool}

\section1 Example

\include qt-add-protobuf-example.qdocinc
*/
