// Copyright (C) 2022 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only

/*!
    \module QtProtobufQtTypes
    \title Protobuf Qt types module
    \brief Provides support for using native Qt types in protobuf.

    Qt::ProtobufQtCoreTypes, Qt::ProtobufQtGuiTypes are libraries with
    pre-defined protobuf messages designed to encapsulate a selection
    of Qt Core and Qt Gui types.

    List of supported types:

    \list QtCore
        \li QByteArray \note Type reflects the \e bytes protobuf type.
        \li QChar
        \li QDate
        \li QDateTime
        \li QPoint
        \li QPointF
        \li QRect
        \li QRectF
        \li QSize
        \li QSizeF
        \li QString \note Type reflects the \e string protobuf type.
        \li QTime
        \li QUrl
        \li QUuid
        \li QVersionNumber
    \endlist

    \list QtGui
        \li QImage
        \li QMatrix4x4
        \li QQuaternion
        \li QRgba64
        \li QTransform
        \li QVector2D
        \li QVector3D
        \li QVector4D
    \endlist

    \section1 Qt Core usage
    To enable QtCore types support add ProtobufQtCoreTypes as a dependency
    to your CMake project:
    \badcode
        ...
        find_package(Qt REQUIRED COMPONENTS Protobuf ProtobufQtCoreTypes)
        ... # After target creation
        target_link_libraries(${TARGET} PRIVATE Qt::ProtobufQtCoreTypes)
    \endcode

    Before any serialization/deserialization of messages that use QtCore types
    as fields, call the registration method:
    \code
        // e.g. in main.cpp
        QtProtobuf::qRegisterProtobufQtCoreTypes();
        ...
    \endcode

    \section1 Qt Gui usage
    To enable QtGui types support add ProtobufQtGuiTypes as a dependency
    to your CMake project:
    \badcode
        ...
        find_package(Qt REQUIRED COMPONENTS Protobuf ProtobufQtGuiTypes)
        ... # After target creation
        target_link_libraries(${TARGET} PRIVATE Qt::ProtobufQtGuiTypes)
    \endcode

    Before any serialization/deserialization of messages that use QtGui types
    as fields, call the registration method:
    \code
        // e.g. in main.cpp
        QtProtobuf::qRegisterProtobufQtGuiTypes();
        ...
    \endcode

    All supported messages are described in special .proto files:

    - QtCore.proto - describes Qt types from QtCore module
    - QtGui.proto - describes Qt types from QtGui module

    These files are also useful if you would like to generate code for other
    languages or frameworks.

    Import the required Qt types module in your interface .proto file,
    for example:
    \badcode
        syntax = "proto3";

        package project.module.component;

        import "QtCore/QtCore.proto";

        message QUrlMessage {
            QtCore.QUrl url = 1;
        }
    \endcode

    The QtProtobuf generator detects Qt types, supplied by the
    ProtobufQtCoreTypes and ProtobufQtGuiTypes packages, and
    uses them directly. This gives you flexibility to use these
    types without additional conversion.
*/
