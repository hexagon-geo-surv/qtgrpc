// Copyright (C) 2022 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only

//! [0]
\li \c COPY_COMMENTS copies comments from \c .proto files. If provided in
the parameter list, comments related to messages and fields are copied to
generated header files.
\li \c GENERATE_PACKAGE_SUBFOLDERS generates a folder structure for the
generated files matching the \c .proto file's package name. For example,
\c{package io.qt.test;} would put the generated files into \c {io/qt/test/}.
\li \c EXPORT_MACRO is the base name of the symbol export macro used for
the generated code. The generated macro name is constructed as
\c QPB_<EXPORT_MACRO>_EXPORT. If the option is not set, the macro is not
generated. Since Qt 6.8, \c EXPORT_MACRO supports the following format:
\c {EXPORT_MACRO=macro_name[:macro_output_file[:<true|false>]]}. The new format
allows you to set the generated macro file name and explicitly enable or disable
the generation of the file containing the macro definitions. If
\c macro_output_file is not set, the option falls back to the old syntax
handling.
//! [0]

//! [1]
\li \c PROTO_FILES is the list of \c .proto files that will be used in the
generation procedure.
\li \c PROTO_INCLUDES is the list of directories that will be searched for
dependencies.
\li \c OUTPUT_DIRECTORY is the directory where the generated files will be
put. By default, the current directory (while evaluating the function) is
used.
\li \c OUTPUT_HEADERS can be used to specify a variable that will
hold the list of headers created by the function. This list can be useful for
custom project install rules.
\li \c OUTPUT_TARGETS can be used to specify a variable that will
hold the list of targets created by the function. This list can be useful for
custom project install rules.
//! [1]
