// Copyright (C) 2022 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only

/*!
\page qtprotobufgen-qt-tool.html
\brief An overview of the qtprotobufgen tool and how to use it.
\title The qtprotobufgen Tool
\inmodule QtProtobuf

The qtprotobufgen tool can be used to generate QtProtobuf classes from a
protobuf schema. The tool is provided by the CMake \c {Qt6::ProtobufTools}
package. It works as an extension to Google's \c protoc tool.

\badcode
    find_package(Qt6 COMPONENTS ProtobufTools REQUIRED)
\endcode

\section1 Usage

Qt provides CMake functions that ease the use of the qtprotobufgen tool.
When using CMake as a build tool you should prefer using the Qt CMake API. For
build systems other than CMake, adapt the commands described in
\l{Running manually}.

\section2 CMake
The following CMake commands integrate a protobuf schema into a Qt project.

\target cmake-commands-qtprotobuf
\annotatedlist cmake-commands-qtprotobuf

Usually qtprotobufgen would be invoked through cmake using the
\c{qt_add_protobuf} macro, as shown in the following example:

\include qt-add-protobuf-example.qdocinc

\section2 Running manually

\badcode
    protoc --plugin=protoc-gen-qtprotobuf=<path/to/bin/>qtprotobufgen \
        --qtprotobuf_out=<output_dir> [-I/extra/proto/include/path] \
        <protofile>.proto
\endcode

To pass options to the generator when invoked manually you must pass the
corresponding keys as the \c{QT_PROTOBUF_OPTIONS} environment variable. Keys
need to be presented as a colon-separated list:
\badcode
    export QT_PROTOBUF_OPTIONS="COMMENTS:FOLDER:EXTRA_NAMESPACE=MyTopLevelNamespace"
\endcode

\section2 Options
The generator supports options that can be provided to tune generation.
Options have direct aliases in the \l{qt_add_protobuf} function. The following
options are supported:

\list
\include qtprotobufgen-options.qdocinc
\endlist
*/
