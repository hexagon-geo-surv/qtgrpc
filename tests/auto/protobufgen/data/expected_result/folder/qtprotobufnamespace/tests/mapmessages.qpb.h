/* This file is autogenerated. DO NOT CHANGE. All changes will be lost */

#ifndef MAPMESSAGES_QPB_H
#define MAPMESSAGES_QPB_H

#include "basicmessages.qpb.h"
#include "tst_qtprotobufgen_gen_exports.qpb.h"

#include <QtProtobuf/qprotobuflazymessagepointer.h>
#include <QtProtobuf/qprotobufmessage.h>
#include <QtProtobuf/qprotobufobject.h>
#include <QtProtobuf/qtprotobuftypes.h>

#include <QtCore/qbytearray.h>
#include <QtCore/qlist.h>
#include <QtCore/qmetatype.h>
#include <QtCore/qshareddata.h>
#include <QtCore/qstring.h>

namespace qtprotobufnamespace::tests {
class SimpleSInt32StringMapMessage;
using SimpleSInt32StringMapMessageRepeated = QList<SimpleSInt32StringMapMessage>;
namespace SimpleSInt32StringMapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleSInt32StringMapMessage_QtProtobufNested

class SimpleSInt64StringMapMessage;
using SimpleSInt64StringMapMessageRepeated = QList<SimpleSInt64StringMapMessage>;
namespace SimpleSInt64StringMapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleSInt64StringMapMessage_QtProtobufNested

class SimpleInt32StringMapMessage;
using SimpleInt32StringMapMessageRepeated = QList<SimpleInt32StringMapMessage>;
namespace SimpleInt32StringMapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleInt32StringMapMessage_QtProtobufNested

class SimpleInt64StringMapMessage;
using SimpleInt64StringMapMessageRepeated = QList<SimpleInt64StringMapMessage>;
namespace SimpleInt64StringMapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleInt64StringMapMessage_QtProtobufNested

class SimpleUInt32StringMapMessage;
using SimpleUInt32StringMapMessageRepeated = QList<SimpleUInt32StringMapMessage>;
namespace SimpleUInt32StringMapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleUInt32StringMapMessage_QtProtobufNested

class SimpleUInt64StringMapMessage;
using SimpleUInt64StringMapMessageRepeated = QList<SimpleUInt64StringMapMessage>;
namespace SimpleUInt64StringMapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleUInt64StringMapMessage_QtProtobufNested

class SimpleFixed32StringMapMessage;
using SimpleFixed32StringMapMessageRepeated = QList<SimpleFixed32StringMapMessage>;
namespace SimpleFixed32StringMapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleFixed32StringMapMessage_QtProtobufNested

class SimpleFixed64StringMapMessage;
using SimpleFixed64StringMapMessageRepeated = QList<SimpleFixed64StringMapMessage>;
namespace SimpleFixed64StringMapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleFixed64StringMapMessage_QtProtobufNested

class SimpleSFixed32StringMapMessage;
using SimpleSFixed32StringMapMessageRepeated = QList<SimpleSFixed32StringMapMessage>;
namespace SimpleSFixed32StringMapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleSFixed32StringMapMessage_QtProtobufNested

class SimpleSFixed64StringMapMessage;
using SimpleSFixed64StringMapMessageRepeated = QList<SimpleSFixed64StringMapMessage>;
namespace SimpleSFixed64StringMapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleSFixed64StringMapMessage_QtProtobufNested

class SimpleStringStringMapMessage;
using SimpleStringStringMapMessageRepeated = QList<SimpleStringStringMapMessage>;
namespace SimpleStringStringMapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleStringStringMapMessage_QtProtobufNested

class SimpleSInt32SInt32MapMessage;
using SimpleSInt32SInt32MapMessageRepeated = QList<SimpleSInt32SInt32MapMessage>;
namespace SimpleSInt32SInt32MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleSInt32SInt32MapMessage_QtProtobufNested

class SimpleSInt64SInt32MapMessage;
using SimpleSInt64SInt32MapMessageRepeated = QList<SimpleSInt64SInt32MapMessage>;
namespace SimpleSInt64SInt32MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleSInt64SInt32MapMessage_QtProtobufNested

class SimpleInt32SInt32MapMessage;
using SimpleInt32SInt32MapMessageRepeated = QList<SimpleInt32SInt32MapMessage>;
namespace SimpleInt32SInt32MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleInt32SInt32MapMessage_QtProtobufNested

class SimpleInt64SInt32MapMessage;
using SimpleInt64SInt32MapMessageRepeated = QList<SimpleInt64SInt32MapMessage>;
namespace SimpleInt64SInt32MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleInt64SInt32MapMessage_QtProtobufNested

class SimpleUInt32SInt32MapMessage;
using SimpleUInt32SInt32MapMessageRepeated = QList<SimpleUInt32SInt32MapMessage>;
namespace SimpleUInt32SInt32MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleUInt32SInt32MapMessage_QtProtobufNested

class SimpleUInt64SInt32MapMessage;
using SimpleUInt64SInt32MapMessageRepeated = QList<SimpleUInt64SInt32MapMessage>;
namespace SimpleUInt64SInt32MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleUInt64SInt32MapMessage_QtProtobufNested

class SimpleFixed32SInt32MapMessage;
using SimpleFixed32SInt32MapMessageRepeated = QList<SimpleFixed32SInt32MapMessage>;
namespace SimpleFixed32SInt32MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleFixed32SInt32MapMessage_QtProtobufNested

class SimpleFixed64SInt32MapMessage;
using SimpleFixed64SInt32MapMessageRepeated = QList<SimpleFixed64SInt32MapMessage>;
namespace SimpleFixed64SInt32MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleFixed64SInt32MapMessage_QtProtobufNested

class SimpleSFixed32SInt32MapMessage;
using SimpleSFixed32SInt32MapMessageRepeated = QList<SimpleSFixed32SInt32MapMessage>;
namespace SimpleSFixed32SInt32MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleSFixed32SInt32MapMessage_QtProtobufNested

class SimpleSFixed64SInt32MapMessage;
using SimpleSFixed64SInt32MapMessageRepeated = QList<SimpleSFixed64SInt32MapMessage>;
namespace SimpleSFixed64SInt32MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleSFixed64SInt32MapMessage_QtProtobufNested

class SimpleStringSInt32MapMessage;
using SimpleStringSInt32MapMessageRepeated = QList<SimpleStringSInt32MapMessage>;
namespace SimpleStringSInt32MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleStringSInt32MapMessage_QtProtobufNested

class SimpleSInt32SInt64MapMessage;
using SimpleSInt32SInt64MapMessageRepeated = QList<SimpleSInt32SInt64MapMessage>;
namespace SimpleSInt32SInt64MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleSInt32SInt64MapMessage_QtProtobufNested

class SimpleSInt64SInt64MapMessage;
using SimpleSInt64SInt64MapMessageRepeated = QList<SimpleSInt64SInt64MapMessage>;
namespace SimpleSInt64SInt64MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleSInt64SInt64MapMessage_QtProtobufNested

class SimpleInt32SInt64MapMessage;
using SimpleInt32SInt64MapMessageRepeated = QList<SimpleInt32SInt64MapMessage>;
namespace SimpleInt32SInt64MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleInt32SInt64MapMessage_QtProtobufNested

class SimpleInt64SInt64MapMessage;
using SimpleInt64SInt64MapMessageRepeated = QList<SimpleInt64SInt64MapMessage>;
namespace SimpleInt64SInt64MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleInt64SInt64MapMessage_QtProtobufNested

class SimpleUInt32SInt64MapMessage;
using SimpleUInt32SInt64MapMessageRepeated = QList<SimpleUInt32SInt64MapMessage>;
namespace SimpleUInt32SInt64MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleUInt32SInt64MapMessage_QtProtobufNested

class SimpleUInt64SInt64MapMessage;
using SimpleUInt64SInt64MapMessageRepeated = QList<SimpleUInt64SInt64MapMessage>;
namespace SimpleUInt64SInt64MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleUInt64SInt64MapMessage_QtProtobufNested

class SimpleFixed32SInt64MapMessage;
using SimpleFixed32SInt64MapMessageRepeated = QList<SimpleFixed32SInt64MapMessage>;
namespace SimpleFixed32SInt64MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleFixed32SInt64MapMessage_QtProtobufNested

class SimpleFixed64SInt64MapMessage;
using SimpleFixed64SInt64MapMessageRepeated = QList<SimpleFixed64SInt64MapMessage>;
namespace SimpleFixed64SInt64MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleFixed64SInt64MapMessage_QtProtobufNested

class SimpleSFixed32SInt64MapMessage;
using SimpleSFixed32SInt64MapMessageRepeated = QList<SimpleSFixed32SInt64MapMessage>;
namespace SimpleSFixed32SInt64MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleSFixed32SInt64MapMessage_QtProtobufNested

class SimpleSFixed64SInt64MapMessage;
using SimpleSFixed64SInt64MapMessageRepeated = QList<SimpleSFixed64SInt64MapMessage>;
namespace SimpleSFixed64SInt64MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleSFixed64SInt64MapMessage_QtProtobufNested

class SimpleStringSInt64MapMessage;
using SimpleStringSInt64MapMessageRepeated = QList<SimpleStringSInt64MapMessage>;
namespace SimpleStringSInt64MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleStringSInt64MapMessage_QtProtobufNested

class SimpleSInt32UInt32MapMessage;
using SimpleSInt32UInt32MapMessageRepeated = QList<SimpleSInt32UInt32MapMessage>;
namespace SimpleSInt32UInt32MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleSInt32UInt32MapMessage_QtProtobufNested

class SimpleSInt64UInt32MapMessage;
using SimpleSInt64UInt32MapMessageRepeated = QList<SimpleSInt64UInt32MapMessage>;
namespace SimpleSInt64UInt32MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleSInt64UInt32MapMessage_QtProtobufNested

class SimpleInt32UInt32MapMessage;
using SimpleInt32UInt32MapMessageRepeated = QList<SimpleInt32UInt32MapMessage>;
namespace SimpleInt32UInt32MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleInt32UInt32MapMessage_QtProtobufNested

class SimpleInt64UInt32MapMessage;
using SimpleInt64UInt32MapMessageRepeated = QList<SimpleInt64UInt32MapMessage>;
namespace SimpleInt64UInt32MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleInt64UInt32MapMessage_QtProtobufNested

class SimpleUInt32UInt32MapMessage;
using SimpleUInt32UInt32MapMessageRepeated = QList<SimpleUInt32UInt32MapMessage>;
namespace SimpleUInt32UInt32MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleUInt32UInt32MapMessage_QtProtobufNested

class SimpleUInt64UInt32MapMessage;
using SimpleUInt64UInt32MapMessageRepeated = QList<SimpleUInt64UInt32MapMessage>;
namespace SimpleUInt64UInt32MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleUInt64UInt32MapMessage_QtProtobufNested

class SimpleFixed32UInt32MapMessage;
using SimpleFixed32UInt32MapMessageRepeated = QList<SimpleFixed32UInt32MapMessage>;
namespace SimpleFixed32UInt32MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleFixed32UInt32MapMessage_QtProtobufNested

class SimpleFixed64UInt32MapMessage;
using SimpleFixed64UInt32MapMessageRepeated = QList<SimpleFixed64UInt32MapMessage>;
namespace SimpleFixed64UInt32MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleFixed64UInt32MapMessage_QtProtobufNested

class SimpleSFixed32UInt32MapMessage;
using SimpleSFixed32UInt32MapMessageRepeated = QList<SimpleSFixed32UInt32MapMessage>;
namespace SimpleSFixed32UInt32MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleSFixed32UInt32MapMessage_QtProtobufNested

class SimpleSFixed64UInt32MapMessage;
using SimpleSFixed64UInt32MapMessageRepeated = QList<SimpleSFixed64UInt32MapMessage>;
namespace SimpleSFixed64UInt32MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleSFixed64UInt32MapMessage_QtProtobufNested

class SimpleStringUInt32MapMessage;
using SimpleStringUInt32MapMessageRepeated = QList<SimpleStringUInt32MapMessage>;
namespace SimpleStringUInt32MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleStringUInt32MapMessage_QtProtobufNested

class SimpleSInt32UInt64MapMessage;
using SimpleSInt32UInt64MapMessageRepeated = QList<SimpleSInt32UInt64MapMessage>;
namespace SimpleSInt32UInt64MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleSInt32UInt64MapMessage_QtProtobufNested

class SimpleSInt64UInt64MapMessage;
using SimpleSInt64UInt64MapMessageRepeated = QList<SimpleSInt64UInt64MapMessage>;
namespace SimpleSInt64UInt64MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleSInt64UInt64MapMessage_QtProtobufNested

class SimpleInt32UInt64MapMessage;
using SimpleInt32UInt64MapMessageRepeated = QList<SimpleInt32UInt64MapMessage>;
namespace SimpleInt32UInt64MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleInt32UInt64MapMessage_QtProtobufNested

class SimpleInt64UInt64MapMessage;
using SimpleInt64UInt64MapMessageRepeated = QList<SimpleInt64UInt64MapMessage>;
namespace SimpleInt64UInt64MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleInt64UInt64MapMessage_QtProtobufNested

class SimpleUInt32UInt64MapMessage;
using SimpleUInt32UInt64MapMessageRepeated = QList<SimpleUInt32UInt64MapMessage>;
namespace SimpleUInt32UInt64MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleUInt32UInt64MapMessage_QtProtobufNested

class SimpleUInt64UInt64MapMessage;
using SimpleUInt64UInt64MapMessageRepeated = QList<SimpleUInt64UInt64MapMessage>;
namespace SimpleUInt64UInt64MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleUInt64UInt64MapMessage_QtProtobufNested

class SimpleFixed32UInt64MapMessage;
using SimpleFixed32UInt64MapMessageRepeated = QList<SimpleFixed32UInt64MapMessage>;
namespace SimpleFixed32UInt64MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleFixed32UInt64MapMessage_QtProtobufNested

class SimpleFixed64UInt64MapMessage;
using SimpleFixed64UInt64MapMessageRepeated = QList<SimpleFixed64UInt64MapMessage>;
namespace SimpleFixed64UInt64MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleFixed64UInt64MapMessage_QtProtobufNested

class SimpleSFixed32UInt64MapMessage;
using SimpleSFixed32UInt64MapMessageRepeated = QList<SimpleSFixed32UInt64MapMessage>;
namespace SimpleSFixed32UInt64MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleSFixed32UInt64MapMessage_QtProtobufNested

class SimpleSFixed64UInt64MapMessage;
using SimpleSFixed64UInt64MapMessageRepeated = QList<SimpleSFixed64UInt64MapMessage>;
namespace SimpleSFixed64UInt64MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleSFixed64UInt64MapMessage_QtProtobufNested

class SimpleStringUInt64MapMessage;
using SimpleStringUInt64MapMessageRepeated = QList<SimpleStringUInt64MapMessage>;
namespace SimpleStringUInt64MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleStringUInt64MapMessage_QtProtobufNested

class SimpleSInt32Int32MapMessage;
using SimpleSInt32Int32MapMessageRepeated = QList<SimpleSInt32Int32MapMessage>;
namespace SimpleSInt32Int32MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleSInt32Int32MapMessage_QtProtobufNested

class SimpleSInt64Int32MapMessage;
using SimpleSInt64Int32MapMessageRepeated = QList<SimpleSInt64Int32MapMessage>;
namespace SimpleSInt64Int32MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleSInt64Int32MapMessage_QtProtobufNested

class SimpleInt32Int32MapMessage;
using SimpleInt32Int32MapMessageRepeated = QList<SimpleInt32Int32MapMessage>;
namespace SimpleInt32Int32MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleInt32Int32MapMessage_QtProtobufNested

class SimpleInt64Int32MapMessage;
using SimpleInt64Int32MapMessageRepeated = QList<SimpleInt64Int32MapMessage>;
namespace SimpleInt64Int32MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleInt64Int32MapMessage_QtProtobufNested

class SimpleUInt32Int32MapMessage;
using SimpleUInt32Int32MapMessageRepeated = QList<SimpleUInt32Int32MapMessage>;
namespace SimpleUInt32Int32MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleUInt32Int32MapMessage_QtProtobufNested

class SimpleUInt64Int32MapMessage;
using SimpleUInt64Int32MapMessageRepeated = QList<SimpleUInt64Int32MapMessage>;
namespace SimpleUInt64Int32MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleUInt64Int32MapMessage_QtProtobufNested

class SimpleFixed32Int32MapMessage;
using SimpleFixed32Int32MapMessageRepeated = QList<SimpleFixed32Int32MapMessage>;
namespace SimpleFixed32Int32MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleFixed32Int32MapMessage_QtProtobufNested

class SimpleFixed64Int32MapMessage;
using SimpleFixed64Int32MapMessageRepeated = QList<SimpleFixed64Int32MapMessage>;
namespace SimpleFixed64Int32MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleFixed64Int32MapMessage_QtProtobufNested

class SimpleSFixed32Int32MapMessage;
using SimpleSFixed32Int32MapMessageRepeated = QList<SimpleSFixed32Int32MapMessage>;
namespace SimpleSFixed32Int32MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleSFixed32Int32MapMessage_QtProtobufNested

class SimpleSFixed64Int32MapMessage;
using SimpleSFixed64Int32MapMessageRepeated = QList<SimpleSFixed64Int32MapMessage>;
namespace SimpleSFixed64Int32MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleSFixed64Int32MapMessage_QtProtobufNested

class SimpleStringInt32MapMessage;
using SimpleStringInt32MapMessageRepeated = QList<SimpleStringInt32MapMessage>;
namespace SimpleStringInt32MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleStringInt32MapMessage_QtProtobufNested

class SimpleSInt32Int64MapMessage;
using SimpleSInt32Int64MapMessageRepeated = QList<SimpleSInt32Int64MapMessage>;
namespace SimpleSInt32Int64MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleSInt32Int64MapMessage_QtProtobufNested

class SimpleSInt64Int64MapMessage;
using SimpleSInt64Int64MapMessageRepeated = QList<SimpleSInt64Int64MapMessage>;
namespace SimpleSInt64Int64MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleSInt64Int64MapMessage_QtProtobufNested

class SimpleInt32Int64MapMessage;
using SimpleInt32Int64MapMessageRepeated = QList<SimpleInt32Int64MapMessage>;
namespace SimpleInt32Int64MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleInt32Int64MapMessage_QtProtobufNested

class SimpleInt64Int64MapMessage;
using SimpleInt64Int64MapMessageRepeated = QList<SimpleInt64Int64MapMessage>;
namespace SimpleInt64Int64MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleInt64Int64MapMessage_QtProtobufNested

class SimpleUInt32Int64MapMessage;
using SimpleUInt32Int64MapMessageRepeated = QList<SimpleUInt32Int64MapMessage>;
namespace SimpleUInt32Int64MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleUInt32Int64MapMessage_QtProtobufNested

class SimpleUInt64Int64MapMessage;
using SimpleUInt64Int64MapMessageRepeated = QList<SimpleUInt64Int64MapMessage>;
namespace SimpleUInt64Int64MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleUInt64Int64MapMessage_QtProtobufNested

class SimpleFixed32Int64MapMessage;
using SimpleFixed32Int64MapMessageRepeated = QList<SimpleFixed32Int64MapMessage>;
namespace SimpleFixed32Int64MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleFixed32Int64MapMessage_QtProtobufNested

class SimpleFixed64Int64MapMessage;
using SimpleFixed64Int64MapMessageRepeated = QList<SimpleFixed64Int64MapMessage>;
namespace SimpleFixed64Int64MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleFixed64Int64MapMessage_QtProtobufNested

class SimpleSFixed32Int64MapMessage;
using SimpleSFixed32Int64MapMessageRepeated = QList<SimpleSFixed32Int64MapMessage>;
namespace SimpleSFixed32Int64MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleSFixed32Int64MapMessage_QtProtobufNested

class SimpleSFixed64Int64MapMessage;
using SimpleSFixed64Int64MapMessageRepeated = QList<SimpleSFixed64Int64MapMessage>;
namespace SimpleSFixed64Int64MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleSFixed64Int64MapMessage_QtProtobufNested

class SimpleStringInt64MapMessage;
using SimpleStringInt64MapMessageRepeated = QList<SimpleStringInt64MapMessage>;
namespace SimpleStringInt64MapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleStringInt64MapMessage_QtProtobufNested

class SimpleSInt32ComplexMessageMapMessage;
using SimpleSInt32ComplexMessageMapMessageRepeated = QList<SimpleSInt32ComplexMessageMapMessage>;
namespace SimpleSInt32ComplexMessageMapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleSInt32ComplexMessageMapMessage_QtProtobufNested

class SimpleSInt64ComplexMessageMapMessage;
using SimpleSInt64ComplexMessageMapMessageRepeated = QList<SimpleSInt64ComplexMessageMapMessage>;
namespace SimpleSInt64ComplexMessageMapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleSInt64ComplexMessageMapMessage_QtProtobufNested

class SimpleInt32ComplexMessageMapMessage;
using SimpleInt32ComplexMessageMapMessageRepeated = QList<SimpleInt32ComplexMessageMapMessage>;
namespace SimpleInt32ComplexMessageMapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleInt32ComplexMessageMapMessage_QtProtobufNested

class SimpleInt64ComplexMessageMapMessage;
using SimpleInt64ComplexMessageMapMessageRepeated = QList<SimpleInt64ComplexMessageMapMessage>;
namespace SimpleInt64ComplexMessageMapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleInt64ComplexMessageMapMessage_QtProtobufNested

class SimpleUInt32ComplexMessageMapMessage;
using SimpleUInt32ComplexMessageMapMessageRepeated = QList<SimpleUInt32ComplexMessageMapMessage>;
namespace SimpleUInt32ComplexMessageMapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleUInt32ComplexMessageMapMessage_QtProtobufNested

class SimpleUInt64ComplexMessageMapMessage;
using SimpleUInt64ComplexMessageMapMessageRepeated = QList<SimpleUInt64ComplexMessageMapMessage>;
namespace SimpleUInt64ComplexMessageMapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleUInt64ComplexMessageMapMessage_QtProtobufNested

class SimpleFixed32ComplexMessageMapMessage;
using SimpleFixed32ComplexMessageMapMessageRepeated = QList<SimpleFixed32ComplexMessageMapMessage>;
namespace SimpleFixed32ComplexMessageMapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleFixed32ComplexMessageMapMessage_QtProtobufNested

class SimpleFixed64ComplexMessageMapMessage;
using SimpleFixed64ComplexMessageMapMessageRepeated = QList<SimpleFixed64ComplexMessageMapMessage>;
namespace SimpleFixed64ComplexMessageMapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleFixed64ComplexMessageMapMessage_QtProtobufNested

class SimpleSFixed32ComplexMessageMapMessage;
using SimpleSFixed32ComplexMessageMapMessageRepeated = QList<SimpleSFixed32ComplexMessageMapMessage>;
namespace SimpleSFixed32ComplexMessageMapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleSFixed32ComplexMessageMapMessage_QtProtobufNested

class SimpleSFixed64ComplexMessageMapMessage;
using SimpleSFixed64ComplexMessageMapMessageRepeated = QList<SimpleSFixed64ComplexMessageMapMessage>;
namespace SimpleSFixed64ComplexMessageMapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleSFixed64ComplexMessageMapMessage_QtProtobufNested

class SimpleStringComplexMessageMapMessage;
using SimpleStringComplexMessageMapMessageRepeated = QList<SimpleStringComplexMessageMapMessage>;
namespace SimpleStringComplexMessageMapMessage_QtProtobufNested {
enum class QtProtobufFieldEnum;
} // namespace SimpleStringComplexMessageMapMessage_QtProtobufNested


class SimpleSInt32StringMapMessage_QtProtobufData;
class SimpleSInt32StringMapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleSInt32StringMapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleSInt32StringMapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::sint32, QString>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt32StringMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleSInt32StringMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt32StringMapMessage(const SimpleSInt32StringMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt32StringMapMessage &operator =(const SimpleSInt32StringMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt32StringMapMessage(SimpleSInt32StringMapMessage &&other) noexcept;
    SimpleSInt32StringMapMessage &operator =(SimpleSInt32StringMapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleSInt32StringMapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleSInt32StringMapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleSInt32StringMapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleSInt32StringMapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleSInt32StringMapMessage &lhs, const SimpleSInt32StringMapMessage &rhs) noexcept;
    friend bool operator==(const SimpleSInt32StringMapMessage &lhs, const SimpleSInt32StringMapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleSInt32StringMapMessage &lhs, const SimpleSInt32StringMapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleSInt32StringMapMessage_QtProtobufData> dptr;
};
namespace SimpleSInt32StringMapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 1,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleSInt32StringMapMessage_QtProtobufNested

class SimpleSInt64StringMapMessage_QtProtobufData;
class SimpleSInt64StringMapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleSInt64StringMapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleSInt64StringMapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::sint64, QString>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt64StringMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleSInt64StringMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt64StringMapMessage(const SimpleSInt64StringMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt64StringMapMessage &operator =(const SimpleSInt64StringMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt64StringMapMessage(SimpleSInt64StringMapMessage &&other) noexcept;
    SimpleSInt64StringMapMessage &operator =(SimpleSInt64StringMapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleSInt64StringMapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleSInt64StringMapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleSInt64StringMapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleSInt64StringMapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleSInt64StringMapMessage &lhs, const SimpleSInt64StringMapMessage &rhs) noexcept;
    friend bool operator==(const SimpleSInt64StringMapMessage &lhs, const SimpleSInt64StringMapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleSInt64StringMapMessage &lhs, const SimpleSInt64StringMapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleSInt64StringMapMessage_QtProtobufData> dptr;
};
namespace SimpleSInt64StringMapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 2,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleSInt64StringMapMessage_QtProtobufNested

class SimpleInt32StringMapMessage_QtProtobufData;
class SimpleInt32StringMapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleInt32StringMapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleInt32StringMapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::int32, QString>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt32StringMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleInt32StringMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt32StringMapMessage(const SimpleInt32StringMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt32StringMapMessage &operator =(const SimpleInt32StringMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt32StringMapMessage(SimpleInt32StringMapMessage &&other) noexcept;
    SimpleInt32StringMapMessage &operator =(SimpleInt32StringMapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleInt32StringMapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleInt32StringMapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleInt32StringMapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleInt32StringMapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleInt32StringMapMessage &lhs, const SimpleInt32StringMapMessage &rhs) noexcept;
    friend bool operator==(const SimpleInt32StringMapMessage &lhs, const SimpleInt32StringMapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleInt32StringMapMessage &lhs, const SimpleInt32StringMapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleInt32StringMapMessage_QtProtobufData> dptr;
};
namespace SimpleInt32StringMapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 3,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleInt32StringMapMessage_QtProtobufNested

class SimpleInt64StringMapMessage_QtProtobufData;
class SimpleInt64StringMapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleInt64StringMapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleInt64StringMapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::int64, QString>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt64StringMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleInt64StringMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt64StringMapMessage(const SimpleInt64StringMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt64StringMapMessage &operator =(const SimpleInt64StringMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt64StringMapMessage(SimpleInt64StringMapMessage &&other) noexcept;
    SimpleInt64StringMapMessage &operator =(SimpleInt64StringMapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleInt64StringMapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleInt64StringMapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleInt64StringMapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleInt64StringMapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleInt64StringMapMessage &lhs, const SimpleInt64StringMapMessage &rhs) noexcept;
    friend bool operator==(const SimpleInt64StringMapMessage &lhs, const SimpleInt64StringMapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleInt64StringMapMessage &lhs, const SimpleInt64StringMapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleInt64StringMapMessage_QtProtobufData> dptr;
};
namespace SimpleInt64StringMapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleInt64StringMapMessage_QtProtobufNested

class SimpleUInt32StringMapMessage_QtProtobufData;
class SimpleUInt32StringMapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleUInt32StringMapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleUInt32StringMapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::uint32, QString>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt32StringMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleUInt32StringMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt32StringMapMessage(const SimpleUInt32StringMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt32StringMapMessage &operator =(const SimpleUInt32StringMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt32StringMapMessage(SimpleUInt32StringMapMessage &&other) noexcept;
    SimpleUInt32StringMapMessage &operator =(SimpleUInt32StringMapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleUInt32StringMapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleUInt32StringMapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleUInt32StringMapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleUInt32StringMapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleUInt32StringMapMessage &lhs, const SimpleUInt32StringMapMessage &rhs) noexcept;
    friend bool operator==(const SimpleUInt32StringMapMessage &lhs, const SimpleUInt32StringMapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleUInt32StringMapMessage &lhs, const SimpleUInt32StringMapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleUInt32StringMapMessage_QtProtobufData> dptr;
};
namespace SimpleUInt32StringMapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 5,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleUInt32StringMapMessage_QtProtobufNested

class SimpleUInt64StringMapMessage_QtProtobufData;
class SimpleUInt64StringMapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleUInt64StringMapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleUInt64StringMapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::uint64, QString>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt64StringMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleUInt64StringMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt64StringMapMessage(const SimpleUInt64StringMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt64StringMapMessage &operator =(const SimpleUInt64StringMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt64StringMapMessage(SimpleUInt64StringMapMessage &&other) noexcept;
    SimpleUInt64StringMapMessage &operator =(SimpleUInt64StringMapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleUInt64StringMapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleUInt64StringMapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleUInt64StringMapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleUInt64StringMapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleUInt64StringMapMessage &lhs, const SimpleUInt64StringMapMessage &rhs) noexcept;
    friend bool operator==(const SimpleUInt64StringMapMessage &lhs, const SimpleUInt64StringMapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleUInt64StringMapMessage &lhs, const SimpleUInt64StringMapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleUInt64StringMapMessage_QtProtobufData> dptr;
};
namespace SimpleUInt64StringMapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 6,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleUInt64StringMapMessage_QtProtobufNested

class SimpleFixed32StringMapMessage_QtProtobufData;
class SimpleFixed32StringMapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleFixed32StringMapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleFixed32StringMapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::fixed32, QString>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed32StringMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleFixed32StringMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed32StringMapMessage(const SimpleFixed32StringMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed32StringMapMessage &operator =(const SimpleFixed32StringMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed32StringMapMessage(SimpleFixed32StringMapMessage &&other) noexcept;
    SimpleFixed32StringMapMessage &operator =(SimpleFixed32StringMapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleFixed32StringMapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleFixed32StringMapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleFixed32StringMapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleFixed32StringMapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleFixed32StringMapMessage &lhs, const SimpleFixed32StringMapMessage &rhs) noexcept;
    friend bool operator==(const SimpleFixed32StringMapMessage &lhs, const SimpleFixed32StringMapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleFixed32StringMapMessage &lhs, const SimpleFixed32StringMapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleFixed32StringMapMessage_QtProtobufData> dptr;
};
namespace SimpleFixed32StringMapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 7,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleFixed32StringMapMessage_QtProtobufNested

class SimpleFixed64StringMapMessage_QtProtobufData;
class SimpleFixed64StringMapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleFixed64StringMapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleFixed64StringMapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::fixed64, QString>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed64StringMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleFixed64StringMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed64StringMapMessage(const SimpleFixed64StringMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed64StringMapMessage &operator =(const SimpleFixed64StringMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed64StringMapMessage(SimpleFixed64StringMapMessage &&other) noexcept;
    SimpleFixed64StringMapMessage &operator =(SimpleFixed64StringMapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleFixed64StringMapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleFixed64StringMapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleFixed64StringMapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleFixed64StringMapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleFixed64StringMapMessage &lhs, const SimpleFixed64StringMapMessage &rhs) noexcept;
    friend bool operator==(const SimpleFixed64StringMapMessage &lhs, const SimpleFixed64StringMapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleFixed64StringMapMessage &lhs, const SimpleFixed64StringMapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleFixed64StringMapMessage_QtProtobufData> dptr;
};
namespace SimpleFixed64StringMapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 8,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleFixed64StringMapMessage_QtProtobufNested

class SimpleSFixed32StringMapMessage_QtProtobufData;
class SimpleSFixed32StringMapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleSFixed32StringMapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleSFixed32StringMapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::sfixed32, QString>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed32StringMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleSFixed32StringMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed32StringMapMessage(const SimpleSFixed32StringMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed32StringMapMessage &operator =(const SimpleSFixed32StringMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed32StringMapMessage(SimpleSFixed32StringMapMessage &&other) noexcept;
    SimpleSFixed32StringMapMessage &operator =(SimpleSFixed32StringMapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleSFixed32StringMapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleSFixed32StringMapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleSFixed32StringMapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleSFixed32StringMapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleSFixed32StringMapMessage &lhs, const SimpleSFixed32StringMapMessage &rhs) noexcept;
    friend bool operator==(const SimpleSFixed32StringMapMessage &lhs, const SimpleSFixed32StringMapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleSFixed32StringMapMessage &lhs, const SimpleSFixed32StringMapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleSFixed32StringMapMessage_QtProtobufData> dptr;
};
namespace SimpleSFixed32StringMapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 9,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleSFixed32StringMapMessage_QtProtobufNested

class SimpleSFixed64StringMapMessage_QtProtobufData;
class SimpleSFixed64StringMapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleSFixed64StringMapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleSFixed64StringMapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::sfixed64, QString>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed64StringMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleSFixed64StringMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed64StringMapMessage(const SimpleSFixed64StringMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed64StringMapMessage &operator =(const SimpleSFixed64StringMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed64StringMapMessage(SimpleSFixed64StringMapMessage &&other) noexcept;
    SimpleSFixed64StringMapMessage &operator =(SimpleSFixed64StringMapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleSFixed64StringMapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleSFixed64StringMapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleSFixed64StringMapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleSFixed64StringMapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleSFixed64StringMapMessage &lhs, const SimpleSFixed64StringMapMessage &rhs) noexcept;
    friend bool operator==(const SimpleSFixed64StringMapMessage &lhs, const SimpleSFixed64StringMapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleSFixed64StringMapMessage &lhs, const SimpleSFixed64StringMapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleSFixed64StringMapMessage_QtProtobufData> dptr;
};
namespace SimpleSFixed64StringMapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 10,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleSFixed64StringMapMessage_QtProtobufNested

class SimpleStringStringMapMessage_QtProtobufData;
class SimpleStringStringMapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleStringStringMapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleStringStringMapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QString, QString>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleStringStringMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleStringStringMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleStringStringMapMessage(const SimpleStringStringMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleStringStringMapMessage &operator =(const SimpleStringStringMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleStringStringMapMessage(SimpleStringStringMapMessage &&other) noexcept;
    SimpleStringStringMapMessage &operator =(SimpleStringStringMapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleStringStringMapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleStringStringMapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleStringStringMapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleStringStringMapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleStringStringMapMessage &lhs, const SimpleStringStringMapMessage &rhs) noexcept;
    friend bool operator==(const SimpleStringStringMapMessage &lhs, const SimpleStringStringMapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleStringStringMapMessage &lhs, const SimpleStringStringMapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleStringStringMapMessage_QtProtobufData> dptr;
};
namespace SimpleStringStringMapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 13,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleStringStringMapMessage_QtProtobufNested

class SimpleSInt32SInt32MapMessage_QtProtobufData;
class SimpleSInt32SInt32MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleSInt32SInt32MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleSInt32SInt32MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::sint32, QtProtobuf::sint32>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt32SInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleSInt32SInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt32SInt32MapMessage(const SimpleSInt32SInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt32SInt32MapMessage &operator =(const SimpleSInt32SInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt32SInt32MapMessage(SimpleSInt32SInt32MapMessage &&other) noexcept;
    SimpleSInt32SInt32MapMessage &operator =(SimpleSInt32SInt32MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleSInt32SInt32MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleSInt32SInt32MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleSInt32SInt32MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleSInt32SInt32MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleSInt32SInt32MapMessage &lhs, const SimpleSInt32SInt32MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleSInt32SInt32MapMessage &lhs, const SimpleSInt32SInt32MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleSInt32SInt32MapMessage &lhs, const SimpleSInt32SInt32MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleSInt32SInt32MapMessage_QtProtobufData> dptr;
};
namespace SimpleSInt32SInt32MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 1,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleSInt32SInt32MapMessage_QtProtobufNested

class SimpleSInt64SInt32MapMessage_QtProtobufData;
class SimpleSInt64SInt32MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleSInt64SInt32MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleSInt64SInt32MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::sint64, QtProtobuf::sint32>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt64SInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleSInt64SInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt64SInt32MapMessage(const SimpleSInt64SInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt64SInt32MapMessage &operator =(const SimpleSInt64SInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt64SInt32MapMessage(SimpleSInt64SInt32MapMessage &&other) noexcept;
    SimpleSInt64SInt32MapMessage &operator =(SimpleSInt64SInt32MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleSInt64SInt32MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleSInt64SInt32MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleSInt64SInt32MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleSInt64SInt32MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleSInt64SInt32MapMessage &lhs, const SimpleSInt64SInt32MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleSInt64SInt32MapMessage &lhs, const SimpleSInt64SInt32MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleSInt64SInt32MapMessage &lhs, const SimpleSInt64SInt32MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleSInt64SInt32MapMessage_QtProtobufData> dptr;
};
namespace SimpleSInt64SInt32MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 2,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleSInt64SInt32MapMessage_QtProtobufNested

class SimpleInt32SInt32MapMessage_QtProtobufData;
class SimpleInt32SInt32MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleInt32SInt32MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleInt32SInt32MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::int32, QtProtobuf::sint32>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt32SInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleInt32SInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt32SInt32MapMessage(const SimpleInt32SInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt32SInt32MapMessage &operator =(const SimpleInt32SInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt32SInt32MapMessage(SimpleInt32SInt32MapMessage &&other) noexcept;
    SimpleInt32SInt32MapMessage &operator =(SimpleInt32SInt32MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleInt32SInt32MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleInt32SInt32MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleInt32SInt32MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleInt32SInt32MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleInt32SInt32MapMessage &lhs, const SimpleInt32SInt32MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleInt32SInt32MapMessage &lhs, const SimpleInt32SInt32MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleInt32SInt32MapMessage &lhs, const SimpleInt32SInt32MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleInt32SInt32MapMessage_QtProtobufData> dptr;
};
namespace SimpleInt32SInt32MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 3,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleInt32SInt32MapMessage_QtProtobufNested

class SimpleInt64SInt32MapMessage_QtProtobufData;
class SimpleInt64SInt32MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleInt64SInt32MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleInt64SInt32MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::int64, QtProtobuf::sint32>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt64SInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleInt64SInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt64SInt32MapMessage(const SimpleInt64SInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt64SInt32MapMessage &operator =(const SimpleInt64SInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt64SInt32MapMessage(SimpleInt64SInt32MapMessage &&other) noexcept;
    SimpleInt64SInt32MapMessage &operator =(SimpleInt64SInt32MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleInt64SInt32MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleInt64SInt32MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleInt64SInt32MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleInt64SInt32MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleInt64SInt32MapMessage &lhs, const SimpleInt64SInt32MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleInt64SInt32MapMessage &lhs, const SimpleInt64SInt32MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleInt64SInt32MapMessage &lhs, const SimpleInt64SInt32MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleInt64SInt32MapMessage_QtProtobufData> dptr;
};
namespace SimpleInt64SInt32MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleInt64SInt32MapMessage_QtProtobufNested

class SimpleUInt32SInt32MapMessage_QtProtobufData;
class SimpleUInt32SInt32MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleUInt32SInt32MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleUInt32SInt32MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::uint32, QtProtobuf::sint32>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt32SInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleUInt32SInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt32SInt32MapMessage(const SimpleUInt32SInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt32SInt32MapMessage &operator =(const SimpleUInt32SInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt32SInt32MapMessage(SimpleUInt32SInt32MapMessage &&other) noexcept;
    SimpleUInt32SInt32MapMessage &operator =(SimpleUInt32SInt32MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleUInt32SInt32MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleUInt32SInt32MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleUInt32SInt32MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleUInt32SInt32MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleUInt32SInt32MapMessage &lhs, const SimpleUInt32SInt32MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleUInt32SInt32MapMessage &lhs, const SimpleUInt32SInt32MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleUInt32SInt32MapMessage &lhs, const SimpleUInt32SInt32MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleUInt32SInt32MapMessage_QtProtobufData> dptr;
};
namespace SimpleUInt32SInt32MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 5,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleUInt32SInt32MapMessage_QtProtobufNested

class SimpleUInt64SInt32MapMessage_QtProtobufData;
class SimpleUInt64SInt32MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleUInt64SInt32MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleUInt64SInt32MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::uint64, QtProtobuf::sint32>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt64SInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleUInt64SInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt64SInt32MapMessage(const SimpleUInt64SInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt64SInt32MapMessage &operator =(const SimpleUInt64SInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt64SInt32MapMessage(SimpleUInt64SInt32MapMessage &&other) noexcept;
    SimpleUInt64SInt32MapMessage &operator =(SimpleUInt64SInt32MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleUInt64SInt32MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleUInt64SInt32MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleUInt64SInt32MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleUInt64SInt32MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleUInt64SInt32MapMessage &lhs, const SimpleUInt64SInt32MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleUInt64SInt32MapMessage &lhs, const SimpleUInt64SInt32MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleUInt64SInt32MapMessage &lhs, const SimpleUInt64SInt32MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleUInt64SInt32MapMessage_QtProtobufData> dptr;
};
namespace SimpleUInt64SInt32MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 6,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleUInt64SInt32MapMessage_QtProtobufNested

class SimpleFixed32SInt32MapMessage_QtProtobufData;
class SimpleFixed32SInt32MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleFixed32SInt32MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleFixed32SInt32MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::fixed32, QtProtobuf::sint32>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed32SInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleFixed32SInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed32SInt32MapMessage(const SimpleFixed32SInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed32SInt32MapMessage &operator =(const SimpleFixed32SInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed32SInt32MapMessage(SimpleFixed32SInt32MapMessage &&other) noexcept;
    SimpleFixed32SInt32MapMessage &operator =(SimpleFixed32SInt32MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleFixed32SInt32MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleFixed32SInt32MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleFixed32SInt32MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleFixed32SInt32MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleFixed32SInt32MapMessage &lhs, const SimpleFixed32SInt32MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleFixed32SInt32MapMessage &lhs, const SimpleFixed32SInt32MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleFixed32SInt32MapMessage &lhs, const SimpleFixed32SInt32MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleFixed32SInt32MapMessage_QtProtobufData> dptr;
};
namespace SimpleFixed32SInt32MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 7,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleFixed32SInt32MapMessage_QtProtobufNested

class SimpleFixed64SInt32MapMessage_QtProtobufData;
class SimpleFixed64SInt32MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleFixed64SInt32MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleFixed64SInt32MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::fixed64, QtProtobuf::sint32>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed64SInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleFixed64SInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed64SInt32MapMessage(const SimpleFixed64SInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed64SInt32MapMessage &operator =(const SimpleFixed64SInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed64SInt32MapMessage(SimpleFixed64SInt32MapMessage &&other) noexcept;
    SimpleFixed64SInt32MapMessage &operator =(SimpleFixed64SInt32MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleFixed64SInt32MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleFixed64SInt32MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleFixed64SInt32MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleFixed64SInt32MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleFixed64SInt32MapMessage &lhs, const SimpleFixed64SInt32MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleFixed64SInt32MapMessage &lhs, const SimpleFixed64SInt32MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleFixed64SInt32MapMessage &lhs, const SimpleFixed64SInt32MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleFixed64SInt32MapMessage_QtProtobufData> dptr;
};
namespace SimpleFixed64SInt32MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 8,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleFixed64SInt32MapMessage_QtProtobufNested

class SimpleSFixed32SInt32MapMessage_QtProtobufData;
class SimpleSFixed32SInt32MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleSFixed32SInt32MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleSFixed32SInt32MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::sfixed32, QtProtobuf::sint32>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed32SInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleSFixed32SInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed32SInt32MapMessage(const SimpleSFixed32SInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed32SInt32MapMessage &operator =(const SimpleSFixed32SInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed32SInt32MapMessage(SimpleSFixed32SInt32MapMessage &&other) noexcept;
    SimpleSFixed32SInt32MapMessage &operator =(SimpleSFixed32SInt32MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleSFixed32SInt32MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleSFixed32SInt32MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleSFixed32SInt32MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleSFixed32SInt32MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleSFixed32SInt32MapMessage &lhs, const SimpleSFixed32SInt32MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleSFixed32SInt32MapMessage &lhs, const SimpleSFixed32SInt32MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleSFixed32SInt32MapMessage &lhs, const SimpleSFixed32SInt32MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleSFixed32SInt32MapMessage_QtProtobufData> dptr;
};
namespace SimpleSFixed32SInt32MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 9,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleSFixed32SInt32MapMessage_QtProtobufNested

class SimpleSFixed64SInt32MapMessage_QtProtobufData;
class SimpleSFixed64SInt32MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleSFixed64SInt32MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleSFixed64SInt32MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::sfixed64, QtProtobuf::sint32>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed64SInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleSFixed64SInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed64SInt32MapMessage(const SimpleSFixed64SInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed64SInt32MapMessage &operator =(const SimpleSFixed64SInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed64SInt32MapMessage(SimpleSFixed64SInt32MapMessage &&other) noexcept;
    SimpleSFixed64SInt32MapMessage &operator =(SimpleSFixed64SInt32MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleSFixed64SInt32MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleSFixed64SInt32MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleSFixed64SInt32MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleSFixed64SInt32MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleSFixed64SInt32MapMessage &lhs, const SimpleSFixed64SInt32MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleSFixed64SInt32MapMessage &lhs, const SimpleSFixed64SInt32MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleSFixed64SInt32MapMessage &lhs, const SimpleSFixed64SInt32MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleSFixed64SInt32MapMessage_QtProtobufData> dptr;
};
namespace SimpleSFixed64SInt32MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 10,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleSFixed64SInt32MapMessage_QtProtobufNested

class SimpleStringSInt32MapMessage_QtProtobufData;
class SimpleStringSInt32MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleStringSInt32MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleStringSInt32MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QString, QtProtobuf::sint32>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleStringSInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleStringSInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleStringSInt32MapMessage(const SimpleStringSInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleStringSInt32MapMessage &operator =(const SimpleStringSInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleStringSInt32MapMessage(SimpleStringSInt32MapMessage &&other) noexcept;
    SimpleStringSInt32MapMessage &operator =(SimpleStringSInt32MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleStringSInt32MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleStringSInt32MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleStringSInt32MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleStringSInt32MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleStringSInt32MapMessage &lhs, const SimpleStringSInt32MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleStringSInt32MapMessage &lhs, const SimpleStringSInt32MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleStringSInt32MapMessage &lhs, const SimpleStringSInt32MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleStringSInt32MapMessage_QtProtobufData> dptr;
};
namespace SimpleStringSInt32MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 13,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleStringSInt32MapMessage_QtProtobufNested

class SimpleSInt32SInt64MapMessage_QtProtobufData;
class SimpleSInt32SInt64MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleSInt32SInt64MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleSInt32SInt64MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::sint32, QtProtobuf::sint64>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt32SInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleSInt32SInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt32SInt64MapMessage(const SimpleSInt32SInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt32SInt64MapMessage &operator =(const SimpleSInt32SInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt32SInt64MapMessage(SimpleSInt32SInt64MapMessage &&other) noexcept;
    SimpleSInt32SInt64MapMessage &operator =(SimpleSInt32SInt64MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleSInt32SInt64MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleSInt32SInt64MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleSInt32SInt64MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleSInt32SInt64MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleSInt32SInt64MapMessage &lhs, const SimpleSInt32SInt64MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleSInt32SInt64MapMessage &lhs, const SimpleSInt32SInt64MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleSInt32SInt64MapMessage &lhs, const SimpleSInt32SInt64MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleSInt32SInt64MapMessage_QtProtobufData> dptr;
};
namespace SimpleSInt32SInt64MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 1,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleSInt32SInt64MapMessage_QtProtobufNested

class SimpleSInt64SInt64MapMessage_QtProtobufData;
class SimpleSInt64SInt64MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleSInt64SInt64MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleSInt64SInt64MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::sint64, QtProtobuf::sint64>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt64SInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleSInt64SInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt64SInt64MapMessage(const SimpleSInt64SInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt64SInt64MapMessage &operator =(const SimpleSInt64SInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt64SInt64MapMessage(SimpleSInt64SInt64MapMessage &&other) noexcept;
    SimpleSInt64SInt64MapMessage &operator =(SimpleSInt64SInt64MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleSInt64SInt64MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleSInt64SInt64MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleSInt64SInt64MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleSInt64SInt64MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleSInt64SInt64MapMessage &lhs, const SimpleSInt64SInt64MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleSInt64SInt64MapMessage &lhs, const SimpleSInt64SInt64MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleSInt64SInt64MapMessage &lhs, const SimpleSInt64SInt64MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleSInt64SInt64MapMessage_QtProtobufData> dptr;
};
namespace SimpleSInt64SInt64MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 2,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleSInt64SInt64MapMessage_QtProtobufNested

class SimpleInt32SInt64MapMessage_QtProtobufData;
class SimpleInt32SInt64MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleInt32SInt64MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleInt32SInt64MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::int32, QtProtobuf::sint64>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt32SInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleInt32SInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt32SInt64MapMessage(const SimpleInt32SInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt32SInt64MapMessage &operator =(const SimpleInt32SInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt32SInt64MapMessage(SimpleInt32SInt64MapMessage &&other) noexcept;
    SimpleInt32SInt64MapMessage &operator =(SimpleInt32SInt64MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleInt32SInt64MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleInt32SInt64MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleInt32SInt64MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleInt32SInt64MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleInt32SInt64MapMessage &lhs, const SimpleInt32SInt64MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleInt32SInt64MapMessage &lhs, const SimpleInt32SInt64MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleInt32SInt64MapMessage &lhs, const SimpleInt32SInt64MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleInt32SInt64MapMessage_QtProtobufData> dptr;
};
namespace SimpleInt32SInt64MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 3,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleInt32SInt64MapMessage_QtProtobufNested

class SimpleInt64SInt64MapMessage_QtProtobufData;
class SimpleInt64SInt64MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleInt64SInt64MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleInt64SInt64MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::int64, QtProtobuf::sint64>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt64SInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleInt64SInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt64SInt64MapMessage(const SimpleInt64SInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt64SInt64MapMessage &operator =(const SimpleInt64SInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt64SInt64MapMessage(SimpleInt64SInt64MapMessage &&other) noexcept;
    SimpleInt64SInt64MapMessage &operator =(SimpleInt64SInt64MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleInt64SInt64MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleInt64SInt64MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleInt64SInt64MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleInt64SInt64MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleInt64SInt64MapMessage &lhs, const SimpleInt64SInt64MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleInt64SInt64MapMessage &lhs, const SimpleInt64SInt64MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleInt64SInt64MapMessage &lhs, const SimpleInt64SInt64MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleInt64SInt64MapMessage_QtProtobufData> dptr;
};
namespace SimpleInt64SInt64MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleInt64SInt64MapMessage_QtProtobufNested

class SimpleUInt32SInt64MapMessage_QtProtobufData;
class SimpleUInt32SInt64MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleUInt32SInt64MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleUInt32SInt64MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::uint32, QtProtobuf::sint64>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt32SInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleUInt32SInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt32SInt64MapMessage(const SimpleUInt32SInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt32SInt64MapMessage &operator =(const SimpleUInt32SInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt32SInt64MapMessage(SimpleUInt32SInt64MapMessage &&other) noexcept;
    SimpleUInt32SInt64MapMessage &operator =(SimpleUInt32SInt64MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleUInt32SInt64MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleUInt32SInt64MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleUInt32SInt64MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleUInt32SInt64MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleUInt32SInt64MapMessage &lhs, const SimpleUInt32SInt64MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleUInt32SInt64MapMessage &lhs, const SimpleUInt32SInt64MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleUInt32SInt64MapMessage &lhs, const SimpleUInt32SInt64MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleUInt32SInt64MapMessage_QtProtobufData> dptr;
};
namespace SimpleUInt32SInt64MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 5,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleUInt32SInt64MapMessage_QtProtobufNested

class SimpleUInt64SInt64MapMessage_QtProtobufData;
class SimpleUInt64SInt64MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleUInt64SInt64MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleUInt64SInt64MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::uint64, QtProtobuf::sint64>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt64SInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleUInt64SInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt64SInt64MapMessage(const SimpleUInt64SInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt64SInt64MapMessage &operator =(const SimpleUInt64SInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt64SInt64MapMessage(SimpleUInt64SInt64MapMessage &&other) noexcept;
    SimpleUInt64SInt64MapMessage &operator =(SimpleUInt64SInt64MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleUInt64SInt64MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleUInt64SInt64MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleUInt64SInt64MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleUInt64SInt64MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleUInt64SInt64MapMessage &lhs, const SimpleUInt64SInt64MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleUInt64SInt64MapMessage &lhs, const SimpleUInt64SInt64MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleUInt64SInt64MapMessage &lhs, const SimpleUInt64SInt64MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleUInt64SInt64MapMessage_QtProtobufData> dptr;
};
namespace SimpleUInt64SInt64MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 6,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleUInt64SInt64MapMessage_QtProtobufNested

class SimpleFixed32SInt64MapMessage_QtProtobufData;
class SimpleFixed32SInt64MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleFixed32SInt64MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleFixed32SInt64MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::fixed32, QtProtobuf::sint64>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed32SInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleFixed32SInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed32SInt64MapMessage(const SimpleFixed32SInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed32SInt64MapMessage &operator =(const SimpleFixed32SInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed32SInt64MapMessage(SimpleFixed32SInt64MapMessage &&other) noexcept;
    SimpleFixed32SInt64MapMessage &operator =(SimpleFixed32SInt64MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleFixed32SInt64MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleFixed32SInt64MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleFixed32SInt64MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleFixed32SInt64MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleFixed32SInt64MapMessage &lhs, const SimpleFixed32SInt64MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleFixed32SInt64MapMessage &lhs, const SimpleFixed32SInt64MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleFixed32SInt64MapMessage &lhs, const SimpleFixed32SInt64MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleFixed32SInt64MapMessage_QtProtobufData> dptr;
};
namespace SimpleFixed32SInt64MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 7,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleFixed32SInt64MapMessage_QtProtobufNested

class SimpleFixed64SInt64MapMessage_QtProtobufData;
class SimpleFixed64SInt64MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleFixed64SInt64MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleFixed64SInt64MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::fixed64, QtProtobuf::sint64>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed64SInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleFixed64SInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed64SInt64MapMessage(const SimpleFixed64SInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed64SInt64MapMessage &operator =(const SimpleFixed64SInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed64SInt64MapMessage(SimpleFixed64SInt64MapMessage &&other) noexcept;
    SimpleFixed64SInt64MapMessage &operator =(SimpleFixed64SInt64MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleFixed64SInt64MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleFixed64SInt64MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleFixed64SInt64MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleFixed64SInt64MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleFixed64SInt64MapMessage &lhs, const SimpleFixed64SInt64MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleFixed64SInt64MapMessage &lhs, const SimpleFixed64SInt64MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleFixed64SInt64MapMessage &lhs, const SimpleFixed64SInt64MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleFixed64SInt64MapMessage_QtProtobufData> dptr;
};
namespace SimpleFixed64SInt64MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 8,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleFixed64SInt64MapMessage_QtProtobufNested

class SimpleSFixed32SInt64MapMessage_QtProtobufData;
class SimpleSFixed32SInt64MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleSFixed32SInt64MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleSFixed32SInt64MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::sfixed32, QtProtobuf::sint64>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed32SInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleSFixed32SInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed32SInt64MapMessage(const SimpleSFixed32SInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed32SInt64MapMessage &operator =(const SimpleSFixed32SInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed32SInt64MapMessage(SimpleSFixed32SInt64MapMessage &&other) noexcept;
    SimpleSFixed32SInt64MapMessage &operator =(SimpleSFixed32SInt64MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleSFixed32SInt64MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleSFixed32SInt64MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleSFixed32SInt64MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleSFixed32SInt64MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleSFixed32SInt64MapMessage &lhs, const SimpleSFixed32SInt64MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleSFixed32SInt64MapMessage &lhs, const SimpleSFixed32SInt64MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleSFixed32SInt64MapMessage &lhs, const SimpleSFixed32SInt64MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleSFixed32SInt64MapMessage_QtProtobufData> dptr;
};
namespace SimpleSFixed32SInt64MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 9,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleSFixed32SInt64MapMessage_QtProtobufNested

class SimpleSFixed64SInt64MapMessage_QtProtobufData;
class SimpleSFixed64SInt64MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleSFixed64SInt64MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleSFixed64SInt64MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::sfixed64, QtProtobuf::sint64>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed64SInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleSFixed64SInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed64SInt64MapMessage(const SimpleSFixed64SInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed64SInt64MapMessage &operator =(const SimpleSFixed64SInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed64SInt64MapMessage(SimpleSFixed64SInt64MapMessage &&other) noexcept;
    SimpleSFixed64SInt64MapMessage &operator =(SimpleSFixed64SInt64MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleSFixed64SInt64MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleSFixed64SInt64MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleSFixed64SInt64MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleSFixed64SInt64MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleSFixed64SInt64MapMessage &lhs, const SimpleSFixed64SInt64MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleSFixed64SInt64MapMessage &lhs, const SimpleSFixed64SInt64MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleSFixed64SInt64MapMessage &lhs, const SimpleSFixed64SInt64MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleSFixed64SInt64MapMessage_QtProtobufData> dptr;
};
namespace SimpleSFixed64SInt64MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 10,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleSFixed64SInt64MapMessage_QtProtobufNested

class SimpleStringSInt64MapMessage_QtProtobufData;
class SimpleStringSInt64MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleStringSInt64MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleStringSInt64MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QString, QtProtobuf::sint64>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleStringSInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleStringSInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleStringSInt64MapMessage(const SimpleStringSInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleStringSInt64MapMessage &operator =(const SimpleStringSInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleStringSInt64MapMessage(SimpleStringSInt64MapMessage &&other) noexcept;
    SimpleStringSInt64MapMessage &operator =(SimpleStringSInt64MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleStringSInt64MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleStringSInt64MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleStringSInt64MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleStringSInt64MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleStringSInt64MapMessage &lhs, const SimpleStringSInt64MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleStringSInt64MapMessage &lhs, const SimpleStringSInt64MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleStringSInt64MapMessage &lhs, const SimpleStringSInt64MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleStringSInt64MapMessage_QtProtobufData> dptr;
};
namespace SimpleStringSInt64MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 13,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleStringSInt64MapMessage_QtProtobufNested

class SimpleSInt32UInt32MapMessage_QtProtobufData;
class SimpleSInt32UInt32MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleSInt32UInt32MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleSInt32UInt32MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::sint32, QtProtobuf::uint32>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt32UInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleSInt32UInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt32UInt32MapMessage(const SimpleSInt32UInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt32UInt32MapMessage &operator =(const SimpleSInt32UInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt32UInt32MapMessage(SimpleSInt32UInt32MapMessage &&other) noexcept;
    SimpleSInt32UInt32MapMessage &operator =(SimpleSInt32UInt32MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleSInt32UInt32MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleSInt32UInt32MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleSInt32UInt32MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleSInt32UInt32MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleSInt32UInt32MapMessage &lhs, const SimpleSInt32UInt32MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleSInt32UInt32MapMessage &lhs, const SimpleSInt32UInt32MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleSInt32UInt32MapMessage &lhs, const SimpleSInt32UInt32MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleSInt32UInt32MapMessage_QtProtobufData> dptr;
};
namespace SimpleSInt32UInt32MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 1,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleSInt32UInt32MapMessage_QtProtobufNested

class SimpleSInt64UInt32MapMessage_QtProtobufData;
class SimpleSInt64UInt32MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleSInt64UInt32MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleSInt64UInt32MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::sint64, QtProtobuf::uint32>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt64UInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleSInt64UInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt64UInt32MapMessage(const SimpleSInt64UInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt64UInt32MapMessage &operator =(const SimpleSInt64UInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt64UInt32MapMessage(SimpleSInt64UInt32MapMessage &&other) noexcept;
    SimpleSInt64UInt32MapMessage &operator =(SimpleSInt64UInt32MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleSInt64UInt32MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleSInt64UInt32MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleSInt64UInt32MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleSInt64UInt32MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleSInt64UInt32MapMessage &lhs, const SimpleSInt64UInt32MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleSInt64UInt32MapMessage &lhs, const SimpleSInt64UInt32MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleSInt64UInt32MapMessage &lhs, const SimpleSInt64UInt32MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleSInt64UInt32MapMessage_QtProtobufData> dptr;
};
namespace SimpleSInt64UInt32MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 2,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleSInt64UInt32MapMessage_QtProtobufNested

class SimpleInt32UInt32MapMessage_QtProtobufData;
class SimpleInt32UInt32MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleInt32UInt32MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleInt32UInt32MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::int32, QtProtobuf::uint32>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt32UInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleInt32UInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt32UInt32MapMessage(const SimpleInt32UInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt32UInt32MapMessage &operator =(const SimpleInt32UInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt32UInt32MapMessage(SimpleInt32UInt32MapMessage &&other) noexcept;
    SimpleInt32UInt32MapMessage &operator =(SimpleInt32UInt32MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleInt32UInt32MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleInt32UInt32MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleInt32UInt32MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleInt32UInt32MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleInt32UInt32MapMessage &lhs, const SimpleInt32UInt32MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleInt32UInt32MapMessage &lhs, const SimpleInt32UInt32MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleInt32UInt32MapMessage &lhs, const SimpleInt32UInt32MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleInt32UInt32MapMessage_QtProtobufData> dptr;
};
namespace SimpleInt32UInt32MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 3,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleInt32UInt32MapMessage_QtProtobufNested

class SimpleInt64UInt32MapMessage_QtProtobufData;
class SimpleInt64UInt32MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleInt64UInt32MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleInt64UInt32MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::int64, QtProtobuf::uint32>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt64UInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleInt64UInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt64UInt32MapMessage(const SimpleInt64UInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt64UInt32MapMessage &operator =(const SimpleInt64UInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt64UInt32MapMessage(SimpleInt64UInt32MapMessage &&other) noexcept;
    SimpleInt64UInt32MapMessage &operator =(SimpleInt64UInt32MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleInt64UInt32MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleInt64UInt32MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleInt64UInt32MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleInt64UInt32MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleInt64UInt32MapMessage &lhs, const SimpleInt64UInt32MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleInt64UInt32MapMessage &lhs, const SimpleInt64UInt32MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleInt64UInt32MapMessage &lhs, const SimpleInt64UInt32MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleInt64UInt32MapMessage_QtProtobufData> dptr;
};
namespace SimpleInt64UInt32MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleInt64UInt32MapMessage_QtProtobufNested

class SimpleUInt32UInt32MapMessage_QtProtobufData;
class SimpleUInt32UInt32MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleUInt32UInt32MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleUInt32UInt32MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::uint32, QtProtobuf::uint32>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt32UInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleUInt32UInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt32UInt32MapMessage(const SimpleUInt32UInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt32UInt32MapMessage &operator =(const SimpleUInt32UInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt32UInt32MapMessage(SimpleUInt32UInt32MapMessage &&other) noexcept;
    SimpleUInt32UInt32MapMessage &operator =(SimpleUInt32UInt32MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleUInt32UInt32MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleUInt32UInt32MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleUInt32UInt32MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleUInt32UInt32MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleUInt32UInt32MapMessage &lhs, const SimpleUInt32UInt32MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleUInt32UInt32MapMessage &lhs, const SimpleUInt32UInt32MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleUInt32UInt32MapMessage &lhs, const SimpleUInt32UInt32MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleUInt32UInt32MapMessage_QtProtobufData> dptr;
};
namespace SimpleUInt32UInt32MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 5,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleUInt32UInt32MapMessage_QtProtobufNested

class SimpleUInt64UInt32MapMessage_QtProtobufData;
class SimpleUInt64UInt32MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleUInt64UInt32MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleUInt64UInt32MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::uint64, QtProtobuf::uint32>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt64UInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleUInt64UInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt64UInt32MapMessage(const SimpleUInt64UInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt64UInt32MapMessage &operator =(const SimpleUInt64UInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt64UInt32MapMessage(SimpleUInt64UInt32MapMessage &&other) noexcept;
    SimpleUInt64UInt32MapMessage &operator =(SimpleUInt64UInt32MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleUInt64UInt32MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleUInt64UInt32MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleUInt64UInt32MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleUInt64UInt32MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleUInt64UInt32MapMessage &lhs, const SimpleUInt64UInt32MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleUInt64UInt32MapMessage &lhs, const SimpleUInt64UInt32MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleUInt64UInt32MapMessage &lhs, const SimpleUInt64UInt32MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleUInt64UInt32MapMessage_QtProtobufData> dptr;
};
namespace SimpleUInt64UInt32MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 6,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleUInt64UInt32MapMessage_QtProtobufNested

class SimpleFixed32UInt32MapMessage_QtProtobufData;
class SimpleFixed32UInt32MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleFixed32UInt32MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleFixed32UInt32MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::fixed32, QtProtobuf::uint32>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed32UInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleFixed32UInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed32UInt32MapMessage(const SimpleFixed32UInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed32UInt32MapMessage &operator =(const SimpleFixed32UInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed32UInt32MapMessage(SimpleFixed32UInt32MapMessage &&other) noexcept;
    SimpleFixed32UInt32MapMessage &operator =(SimpleFixed32UInt32MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleFixed32UInt32MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleFixed32UInt32MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleFixed32UInt32MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleFixed32UInt32MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleFixed32UInt32MapMessage &lhs, const SimpleFixed32UInt32MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleFixed32UInt32MapMessage &lhs, const SimpleFixed32UInt32MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleFixed32UInt32MapMessage &lhs, const SimpleFixed32UInt32MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleFixed32UInt32MapMessage_QtProtobufData> dptr;
};
namespace SimpleFixed32UInt32MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 7,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleFixed32UInt32MapMessage_QtProtobufNested

class SimpleFixed64UInt32MapMessage_QtProtobufData;
class SimpleFixed64UInt32MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleFixed64UInt32MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleFixed64UInt32MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::fixed64, QtProtobuf::uint32>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed64UInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleFixed64UInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed64UInt32MapMessage(const SimpleFixed64UInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed64UInt32MapMessage &operator =(const SimpleFixed64UInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed64UInt32MapMessage(SimpleFixed64UInt32MapMessage &&other) noexcept;
    SimpleFixed64UInt32MapMessage &operator =(SimpleFixed64UInt32MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleFixed64UInt32MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleFixed64UInt32MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleFixed64UInt32MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleFixed64UInt32MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleFixed64UInt32MapMessage &lhs, const SimpleFixed64UInt32MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleFixed64UInt32MapMessage &lhs, const SimpleFixed64UInt32MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleFixed64UInt32MapMessage &lhs, const SimpleFixed64UInt32MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleFixed64UInt32MapMessage_QtProtobufData> dptr;
};
namespace SimpleFixed64UInt32MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 8,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleFixed64UInt32MapMessage_QtProtobufNested

class SimpleSFixed32UInt32MapMessage_QtProtobufData;
class SimpleSFixed32UInt32MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleSFixed32UInt32MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleSFixed32UInt32MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::sfixed32, QtProtobuf::uint32>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed32UInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleSFixed32UInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed32UInt32MapMessage(const SimpleSFixed32UInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed32UInt32MapMessage &operator =(const SimpleSFixed32UInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed32UInt32MapMessage(SimpleSFixed32UInt32MapMessage &&other) noexcept;
    SimpleSFixed32UInt32MapMessage &operator =(SimpleSFixed32UInt32MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleSFixed32UInt32MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleSFixed32UInt32MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleSFixed32UInt32MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleSFixed32UInt32MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleSFixed32UInt32MapMessage &lhs, const SimpleSFixed32UInt32MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleSFixed32UInt32MapMessage &lhs, const SimpleSFixed32UInt32MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleSFixed32UInt32MapMessage &lhs, const SimpleSFixed32UInt32MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleSFixed32UInt32MapMessage_QtProtobufData> dptr;
};
namespace SimpleSFixed32UInt32MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 9,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleSFixed32UInt32MapMessage_QtProtobufNested

class SimpleSFixed64UInt32MapMessage_QtProtobufData;
class SimpleSFixed64UInt32MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleSFixed64UInt32MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleSFixed64UInt32MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::sfixed64, QtProtobuf::uint32>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed64UInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleSFixed64UInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed64UInt32MapMessage(const SimpleSFixed64UInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed64UInt32MapMessage &operator =(const SimpleSFixed64UInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed64UInt32MapMessage(SimpleSFixed64UInt32MapMessage &&other) noexcept;
    SimpleSFixed64UInt32MapMessage &operator =(SimpleSFixed64UInt32MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleSFixed64UInt32MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleSFixed64UInt32MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleSFixed64UInt32MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleSFixed64UInt32MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleSFixed64UInt32MapMessage &lhs, const SimpleSFixed64UInt32MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleSFixed64UInt32MapMessage &lhs, const SimpleSFixed64UInt32MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleSFixed64UInt32MapMessage &lhs, const SimpleSFixed64UInt32MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleSFixed64UInt32MapMessage_QtProtobufData> dptr;
};
namespace SimpleSFixed64UInt32MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 10,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleSFixed64UInt32MapMessage_QtProtobufNested

class SimpleStringUInt32MapMessage_QtProtobufData;
class SimpleStringUInt32MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleStringUInt32MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleStringUInt32MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QString, QtProtobuf::uint32>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleStringUInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleStringUInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleStringUInt32MapMessage(const SimpleStringUInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleStringUInt32MapMessage &operator =(const SimpleStringUInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleStringUInt32MapMessage(SimpleStringUInt32MapMessage &&other) noexcept;
    SimpleStringUInt32MapMessage &operator =(SimpleStringUInt32MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleStringUInt32MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleStringUInt32MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleStringUInt32MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleStringUInt32MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleStringUInt32MapMessage &lhs, const SimpleStringUInt32MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleStringUInt32MapMessage &lhs, const SimpleStringUInt32MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleStringUInt32MapMessage &lhs, const SimpleStringUInt32MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleStringUInt32MapMessage_QtProtobufData> dptr;
};
namespace SimpleStringUInt32MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 13,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleStringUInt32MapMessage_QtProtobufNested

class SimpleSInt32UInt64MapMessage_QtProtobufData;
class SimpleSInt32UInt64MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleSInt32UInt64MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleSInt32UInt64MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::sint32, QtProtobuf::uint64>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt32UInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleSInt32UInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt32UInt64MapMessage(const SimpleSInt32UInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt32UInt64MapMessage &operator =(const SimpleSInt32UInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt32UInt64MapMessage(SimpleSInt32UInt64MapMessage &&other) noexcept;
    SimpleSInt32UInt64MapMessage &operator =(SimpleSInt32UInt64MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleSInt32UInt64MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleSInt32UInt64MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleSInt32UInt64MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleSInt32UInt64MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleSInt32UInt64MapMessage &lhs, const SimpleSInt32UInt64MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleSInt32UInt64MapMessage &lhs, const SimpleSInt32UInt64MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleSInt32UInt64MapMessage &lhs, const SimpleSInt32UInt64MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleSInt32UInt64MapMessage_QtProtobufData> dptr;
};
namespace SimpleSInt32UInt64MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 1,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleSInt32UInt64MapMessage_QtProtobufNested

class SimpleSInt64UInt64MapMessage_QtProtobufData;
class SimpleSInt64UInt64MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleSInt64UInt64MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleSInt64UInt64MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::sint64, QtProtobuf::uint64>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt64UInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleSInt64UInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt64UInt64MapMessage(const SimpleSInt64UInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt64UInt64MapMessage &operator =(const SimpleSInt64UInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt64UInt64MapMessage(SimpleSInt64UInt64MapMessage &&other) noexcept;
    SimpleSInt64UInt64MapMessage &operator =(SimpleSInt64UInt64MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleSInt64UInt64MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleSInt64UInt64MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleSInt64UInt64MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleSInt64UInt64MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleSInt64UInt64MapMessage &lhs, const SimpleSInt64UInt64MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleSInt64UInt64MapMessage &lhs, const SimpleSInt64UInt64MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleSInt64UInt64MapMessage &lhs, const SimpleSInt64UInt64MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleSInt64UInt64MapMessage_QtProtobufData> dptr;
};
namespace SimpleSInt64UInt64MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 2,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleSInt64UInt64MapMessage_QtProtobufNested

class SimpleInt32UInt64MapMessage_QtProtobufData;
class SimpleInt32UInt64MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleInt32UInt64MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleInt32UInt64MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::int32, QtProtobuf::uint64>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt32UInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleInt32UInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt32UInt64MapMessage(const SimpleInt32UInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt32UInt64MapMessage &operator =(const SimpleInt32UInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt32UInt64MapMessage(SimpleInt32UInt64MapMessage &&other) noexcept;
    SimpleInt32UInt64MapMessage &operator =(SimpleInt32UInt64MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleInt32UInt64MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleInt32UInt64MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleInt32UInt64MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleInt32UInt64MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleInt32UInt64MapMessage &lhs, const SimpleInt32UInt64MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleInt32UInt64MapMessage &lhs, const SimpleInt32UInt64MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleInt32UInt64MapMessage &lhs, const SimpleInt32UInt64MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleInt32UInt64MapMessage_QtProtobufData> dptr;
};
namespace SimpleInt32UInt64MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 3,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleInt32UInt64MapMessage_QtProtobufNested

class SimpleInt64UInt64MapMessage_QtProtobufData;
class SimpleInt64UInt64MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleInt64UInt64MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleInt64UInt64MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::int64, QtProtobuf::uint64>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt64UInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleInt64UInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt64UInt64MapMessage(const SimpleInt64UInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt64UInt64MapMessage &operator =(const SimpleInt64UInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt64UInt64MapMessage(SimpleInt64UInt64MapMessage &&other) noexcept;
    SimpleInt64UInt64MapMessage &operator =(SimpleInt64UInt64MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleInt64UInt64MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleInt64UInt64MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleInt64UInt64MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleInt64UInt64MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleInt64UInt64MapMessage &lhs, const SimpleInt64UInt64MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleInt64UInt64MapMessage &lhs, const SimpleInt64UInt64MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleInt64UInt64MapMessage &lhs, const SimpleInt64UInt64MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleInt64UInt64MapMessage_QtProtobufData> dptr;
};
namespace SimpleInt64UInt64MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleInt64UInt64MapMessage_QtProtobufNested

class SimpleUInt32UInt64MapMessage_QtProtobufData;
class SimpleUInt32UInt64MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleUInt32UInt64MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleUInt32UInt64MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::uint32, QtProtobuf::uint64>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt32UInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleUInt32UInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt32UInt64MapMessage(const SimpleUInt32UInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt32UInt64MapMessage &operator =(const SimpleUInt32UInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt32UInt64MapMessage(SimpleUInt32UInt64MapMessage &&other) noexcept;
    SimpleUInt32UInt64MapMessage &operator =(SimpleUInt32UInt64MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleUInt32UInt64MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleUInt32UInt64MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleUInt32UInt64MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleUInt32UInt64MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleUInt32UInt64MapMessage &lhs, const SimpleUInt32UInt64MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleUInt32UInt64MapMessage &lhs, const SimpleUInt32UInt64MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleUInt32UInt64MapMessage &lhs, const SimpleUInt32UInt64MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleUInt32UInt64MapMessage_QtProtobufData> dptr;
};
namespace SimpleUInt32UInt64MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 5,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleUInt32UInt64MapMessage_QtProtobufNested

class SimpleUInt64UInt64MapMessage_QtProtobufData;
class SimpleUInt64UInt64MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleUInt64UInt64MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleUInt64UInt64MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::uint64, QtProtobuf::uint64>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt64UInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleUInt64UInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt64UInt64MapMessage(const SimpleUInt64UInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt64UInt64MapMessage &operator =(const SimpleUInt64UInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt64UInt64MapMessage(SimpleUInt64UInt64MapMessage &&other) noexcept;
    SimpleUInt64UInt64MapMessage &operator =(SimpleUInt64UInt64MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleUInt64UInt64MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleUInt64UInt64MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleUInt64UInt64MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleUInt64UInt64MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleUInt64UInt64MapMessage &lhs, const SimpleUInt64UInt64MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleUInt64UInt64MapMessage &lhs, const SimpleUInt64UInt64MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleUInt64UInt64MapMessage &lhs, const SimpleUInt64UInt64MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleUInt64UInt64MapMessage_QtProtobufData> dptr;
};
namespace SimpleUInt64UInt64MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 6,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleUInt64UInt64MapMessage_QtProtobufNested

class SimpleFixed32UInt64MapMessage_QtProtobufData;
class SimpleFixed32UInt64MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleFixed32UInt64MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleFixed32UInt64MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::fixed32, QtProtobuf::uint64>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed32UInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleFixed32UInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed32UInt64MapMessage(const SimpleFixed32UInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed32UInt64MapMessage &operator =(const SimpleFixed32UInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed32UInt64MapMessage(SimpleFixed32UInt64MapMessage &&other) noexcept;
    SimpleFixed32UInt64MapMessage &operator =(SimpleFixed32UInt64MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleFixed32UInt64MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleFixed32UInt64MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleFixed32UInt64MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleFixed32UInt64MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleFixed32UInt64MapMessage &lhs, const SimpleFixed32UInt64MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleFixed32UInt64MapMessage &lhs, const SimpleFixed32UInt64MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleFixed32UInt64MapMessage &lhs, const SimpleFixed32UInt64MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleFixed32UInt64MapMessage_QtProtobufData> dptr;
};
namespace SimpleFixed32UInt64MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 7,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleFixed32UInt64MapMessage_QtProtobufNested

class SimpleFixed64UInt64MapMessage_QtProtobufData;
class SimpleFixed64UInt64MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleFixed64UInt64MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleFixed64UInt64MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::fixed64, QtProtobuf::uint64>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed64UInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleFixed64UInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed64UInt64MapMessage(const SimpleFixed64UInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed64UInt64MapMessage &operator =(const SimpleFixed64UInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed64UInt64MapMessage(SimpleFixed64UInt64MapMessage &&other) noexcept;
    SimpleFixed64UInt64MapMessage &operator =(SimpleFixed64UInt64MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleFixed64UInt64MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleFixed64UInt64MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleFixed64UInt64MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleFixed64UInt64MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleFixed64UInt64MapMessage &lhs, const SimpleFixed64UInt64MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleFixed64UInt64MapMessage &lhs, const SimpleFixed64UInt64MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleFixed64UInt64MapMessage &lhs, const SimpleFixed64UInt64MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleFixed64UInt64MapMessage_QtProtobufData> dptr;
};
namespace SimpleFixed64UInt64MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 8,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleFixed64UInt64MapMessage_QtProtobufNested

class SimpleSFixed32UInt64MapMessage_QtProtobufData;
class SimpleSFixed32UInt64MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleSFixed32UInt64MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleSFixed32UInt64MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::sfixed32, QtProtobuf::uint64>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed32UInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleSFixed32UInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed32UInt64MapMessage(const SimpleSFixed32UInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed32UInt64MapMessage &operator =(const SimpleSFixed32UInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed32UInt64MapMessage(SimpleSFixed32UInt64MapMessage &&other) noexcept;
    SimpleSFixed32UInt64MapMessage &operator =(SimpleSFixed32UInt64MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleSFixed32UInt64MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleSFixed32UInt64MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleSFixed32UInt64MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleSFixed32UInt64MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleSFixed32UInt64MapMessage &lhs, const SimpleSFixed32UInt64MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleSFixed32UInt64MapMessage &lhs, const SimpleSFixed32UInt64MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleSFixed32UInt64MapMessage &lhs, const SimpleSFixed32UInt64MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleSFixed32UInt64MapMessage_QtProtobufData> dptr;
};
namespace SimpleSFixed32UInt64MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 9,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleSFixed32UInt64MapMessage_QtProtobufNested

class SimpleSFixed64UInt64MapMessage_QtProtobufData;
class SimpleSFixed64UInt64MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleSFixed64UInt64MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleSFixed64UInt64MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::sfixed64, QtProtobuf::uint64>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed64UInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleSFixed64UInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed64UInt64MapMessage(const SimpleSFixed64UInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed64UInt64MapMessage &operator =(const SimpleSFixed64UInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed64UInt64MapMessage(SimpleSFixed64UInt64MapMessage &&other) noexcept;
    SimpleSFixed64UInt64MapMessage &operator =(SimpleSFixed64UInt64MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleSFixed64UInt64MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleSFixed64UInt64MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleSFixed64UInt64MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleSFixed64UInt64MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleSFixed64UInt64MapMessage &lhs, const SimpleSFixed64UInt64MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleSFixed64UInt64MapMessage &lhs, const SimpleSFixed64UInt64MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleSFixed64UInt64MapMessage &lhs, const SimpleSFixed64UInt64MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleSFixed64UInt64MapMessage_QtProtobufData> dptr;
};
namespace SimpleSFixed64UInt64MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 10,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleSFixed64UInt64MapMessage_QtProtobufNested

class SimpleStringUInt64MapMessage_QtProtobufData;
class SimpleStringUInt64MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleStringUInt64MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleStringUInt64MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QString, QtProtobuf::uint64>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleStringUInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleStringUInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleStringUInt64MapMessage(const SimpleStringUInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleStringUInt64MapMessage &operator =(const SimpleStringUInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleStringUInt64MapMessage(SimpleStringUInt64MapMessage &&other) noexcept;
    SimpleStringUInt64MapMessage &operator =(SimpleStringUInt64MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleStringUInt64MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleStringUInt64MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleStringUInt64MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleStringUInt64MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleStringUInt64MapMessage &lhs, const SimpleStringUInt64MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleStringUInt64MapMessage &lhs, const SimpleStringUInt64MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleStringUInt64MapMessage &lhs, const SimpleStringUInt64MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleStringUInt64MapMessage_QtProtobufData> dptr;
};
namespace SimpleStringUInt64MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 13,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleStringUInt64MapMessage_QtProtobufNested

class SimpleSInt32Int32MapMessage_QtProtobufData;
class SimpleSInt32Int32MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleSInt32Int32MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleSInt32Int32MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::sint32, QtProtobuf::int32>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt32Int32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleSInt32Int32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt32Int32MapMessage(const SimpleSInt32Int32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt32Int32MapMessage &operator =(const SimpleSInt32Int32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt32Int32MapMessage(SimpleSInt32Int32MapMessage &&other) noexcept;
    SimpleSInt32Int32MapMessage &operator =(SimpleSInt32Int32MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleSInt32Int32MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleSInt32Int32MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleSInt32Int32MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleSInt32Int32MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleSInt32Int32MapMessage &lhs, const SimpleSInt32Int32MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleSInt32Int32MapMessage &lhs, const SimpleSInt32Int32MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleSInt32Int32MapMessage &lhs, const SimpleSInt32Int32MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleSInt32Int32MapMessage_QtProtobufData> dptr;
};
namespace SimpleSInt32Int32MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 1,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleSInt32Int32MapMessage_QtProtobufNested

class SimpleSInt64Int32MapMessage_QtProtobufData;
class SimpleSInt64Int32MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleSInt64Int32MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleSInt64Int32MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::sint64, QtProtobuf::int32>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt64Int32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleSInt64Int32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt64Int32MapMessage(const SimpleSInt64Int32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt64Int32MapMessage &operator =(const SimpleSInt64Int32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt64Int32MapMessage(SimpleSInt64Int32MapMessage &&other) noexcept;
    SimpleSInt64Int32MapMessage &operator =(SimpleSInt64Int32MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleSInt64Int32MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleSInt64Int32MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleSInt64Int32MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleSInt64Int32MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleSInt64Int32MapMessage &lhs, const SimpleSInt64Int32MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleSInt64Int32MapMessage &lhs, const SimpleSInt64Int32MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleSInt64Int32MapMessage &lhs, const SimpleSInt64Int32MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleSInt64Int32MapMessage_QtProtobufData> dptr;
};
namespace SimpleSInt64Int32MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 2,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleSInt64Int32MapMessage_QtProtobufNested

class SimpleInt32Int32MapMessage_QtProtobufData;
class SimpleInt32Int32MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleInt32Int32MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleInt32Int32MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::int32, QtProtobuf::int32>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt32Int32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleInt32Int32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt32Int32MapMessage(const SimpleInt32Int32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt32Int32MapMessage &operator =(const SimpleInt32Int32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt32Int32MapMessage(SimpleInt32Int32MapMessage &&other) noexcept;
    SimpleInt32Int32MapMessage &operator =(SimpleInt32Int32MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleInt32Int32MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleInt32Int32MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleInt32Int32MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleInt32Int32MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleInt32Int32MapMessage &lhs, const SimpleInt32Int32MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleInt32Int32MapMessage &lhs, const SimpleInt32Int32MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleInt32Int32MapMessage &lhs, const SimpleInt32Int32MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleInt32Int32MapMessage_QtProtobufData> dptr;
};
namespace SimpleInt32Int32MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 3,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleInt32Int32MapMessage_QtProtobufNested

class SimpleInt64Int32MapMessage_QtProtobufData;
class SimpleInt64Int32MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleInt64Int32MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleInt64Int32MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::int64, QtProtobuf::int32>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt64Int32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleInt64Int32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt64Int32MapMessage(const SimpleInt64Int32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt64Int32MapMessage &operator =(const SimpleInt64Int32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt64Int32MapMessage(SimpleInt64Int32MapMessage &&other) noexcept;
    SimpleInt64Int32MapMessage &operator =(SimpleInt64Int32MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleInt64Int32MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleInt64Int32MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleInt64Int32MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleInt64Int32MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleInt64Int32MapMessage &lhs, const SimpleInt64Int32MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleInt64Int32MapMessage &lhs, const SimpleInt64Int32MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleInt64Int32MapMessage &lhs, const SimpleInt64Int32MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleInt64Int32MapMessage_QtProtobufData> dptr;
};
namespace SimpleInt64Int32MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleInt64Int32MapMessage_QtProtobufNested

class SimpleUInt32Int32MapMessage_QtProtobufData;
class SimpleUInt32Int32MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleUInt32Int32MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleUInt32Int32MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::uint32, QtProtobuf::int32>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt32Int32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleUInt32Int32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt32Int32MapMessage(const SimpleUInt32Int32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt32Int32MapMessage &operator =(const SimpleUInt32Int32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt32Int32MapMessage(SimpleUInt32Int32MapMessage &&other) noexcept;
    SimpleUInt32Int32MapMessage &operator =(SimpleUInt32Int32MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleUInt32Int32MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleUInt32Int32MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleUInt32Int32MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleUInt32Int32MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleUInt32Int32MapMessage &lhs, const SimpleUInt32Int32MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleUInt32Int32MapMessage &lhs, const SimpleUInt32Int32MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleUInt32Int32MapMessage &lhs, const SimpleUInt32Int32MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleUInt32Int32MapMessage_QtProtobufData> dptr;
};
namespace SimpleUInt32Int32MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 5,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleUInt32Int32MapMessage_QtProtobufNested

class SimpleUInt64Int32MapMessage_QtProtobufData;
class SimpleUInt64Int32MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleUInt64Int32MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleUInt64Int32MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::uint64, QtProtobuf::int32>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt64Int32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleUInt64Int32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt64Int32MapMessage(const SimpleUInt64Int32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt64Int32MapMessage &operator =(const SimpleUInt64Int32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt64Int32MapMessage(SimpleUInt64Int32MapMessage &&other) noexcept;
    SimpleUInt64Int32MapMessage &operator =(SimpleUInt64Int32MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleUInt64Int32MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleUInt64Int32MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleUInt64Int32MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleUInt64Int32MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleUInt64Int32MapMessage &lhs, const SimpleUInt64Int32MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleUInt64Int32MapMessage &lhs, const SimpleUInt64Int32MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleUInt64Int32MapMessage &lhs, const SimpleUInt64Int32MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleUInt64Int32MapMessage_QtProtobufData> dptr;
};
namespace SimpleUInt64Int32MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 6,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleUInt64Int32MapMessage_QtProtobufNested

class SimpleFixed32Int32MapMessage_QtProtobufData;
class SimpleFixed32Int32MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleFixed32Int32MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleFixed32Int32MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::fixed32, QtProtobuf::int32>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed32Int32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleFixed32Int32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed32Int32MapMessage(const SimpleFixed32Int32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed32Int32MapMessage &operator =(const SimpleFixed32Int32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed32Int32MapMessage(SimpleFixed32Int32MapMessage &&other) noexcept;
    SimpleFixed32Int32MapMessage &operator =(SimpleFixed32Int32MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleFixed32Int32MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleFixed32Int32MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleFixed32Int32MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleFixed32Int32MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleFixed32Int32MapMessage &lhs, const SimpleFixed32Int32MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleFixed32Int32MapMessage &lhs, const SimpleFixed32Int32MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleFixed32Int32MapMessage &lhs, const SimpleFixed32Int32MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleFixed32Int32MapMessage_QtProtobufData> dptr;
};
namespace SimpleFixed32Int32MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 7,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleFixed32Int32MapMessage_QtProtobufNested

class SimpleFixed64Int32MapMessage_QtProtobufData;
class SimpleFixed64Int32MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleFixed64Int32MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleFixed64Int32MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::fixed64, QtProtobuf::int32>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed64Int32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleFixed64Int32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed64Int32MapMessage(const SimpleFixed64Int32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed64Int32MapMessage &operator =(const SimpleFixed64Int32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed64Int32MapMessage(SimpleFixed64Int32MapMessage &&other) noexcept;
    SimpleFixed64Int32MapMessage &operator =(SimpleFixed64Int32MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleFixed64Int32MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleFixed64Int32MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleFixed64Int32MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleFixed64Int32MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleFixed64Int32MapMessage &lhs, const SimpleFixed64Int32MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleFixed64Int32MapMessage &lhs, const SimpleFixed64Int32MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleFixed64Int32MapMessage &lhs, const SimpleFixed64Int32MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleFixed64Int32MapMessage_QtProtobufData> dptr;
};
namespace SimpleFixed64Int32MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 8,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleFixed64Int32MapMessage_QtProtobufNested

class SimpleSFixed32Int32MapMessage_QtProtobufData;
class SimpleSFixed32Int32MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleSFixed32Int32MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleSFixed32Int32MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::sfixed32, QtProtobuf::int32>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed32Int32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleSFixed32Int32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed32Int32MapMessage(const SimpleSFixed32Int32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed32Int32MapMessage &operator =(const SimpleSFixed32Int32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed32Int32MapMessage(SimpleSFixed32Int32MapMessage &&other) noexcept;
    SimpleSFixed32Int32MapMessage &operator =(SimpleSFixed32Int32MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleSFixed32Int32MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleSFixed32Int32MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleSFixed32Int32MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleSFixed32Int32MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleSFixed32Int32MapMessage &lhs, const SimpleSFixed32Int32MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleSFixed32Int32MapMessage &lhs, const SimpleSFixed32Int32MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleSFixed32Int32MapMessage &lhs, const SimpleSFixed32Int32MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleSFixed32Int32MapMessage_QtProtobufData> dptr;
};
namespace SimpleSFixed32Int32MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 9,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleSFixed32Int32MapMessage_QtProtobufNested

class SimpleSFixed64Int32MapMessage_QtProtobufData;
class SimpleSFixed64Int32MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleSFixed64Int32MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleSFixed64Int32MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::sfixed64, QtProtobuf::int32>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed64Int32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleSFixed64Int32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed64Int32MapMessage(const SimpleSFixed64Int32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed64Int32MapMessage &operator =(const SimpleSFixed64Int32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed64Int32MapMessage(SimpleSFixed64Int32MapMessage &&other) noexcept;
    SimpleSFixed64Int32MapMessage &operator =(SimpleSFixed64Int32MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleSFixed64Int32MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleSFixed64Int32MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleSFixed64Int32MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleSFixed64Int32MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleSFixed64Int32MapMessage &lhs, const SimpleSFixed64Int32MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleSFixed64Int32MapMessage &lhs, const SimpleSFixed64Int32MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleSFixed64Int32MapMessage &lhs, const SimpleSFixed64Int32MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleSFixed64Int32MapMessage_QtProtobufData> dptr;
};
namespace SimpleSFixed64Int32MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 10,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleSFixed64Int32MapMessage_QtProtobufNested

class SimpleStringInt32MapMessage_QtProtobufData;
class SimpleStringInt32MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleStringInt32MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleStringInt32MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QString, QtProtobuf::int32>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleStringInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleStringInt32MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleStringInt32MapMessage(const SimpleStringInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleStringInt32MapMessage &operator =(const SimpleStringInt32MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleStringInt32MapMessage(SimpleStringInt32MapMessage &&other) noexcept;
    SimpleStringInt32MapMessage &operator =(SimpleStringInt32MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleStringInt32MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleStringInt32MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleStringInt32MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleStringInt32MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleStringInt32MapMessage &lhs, const SimpleStringInt32MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleStringInt32MapMessage &lhs, const SimpleStringInt32MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleStringInt32MapMessage &lhs, const SimpleStringInt32MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleStringInt32MapMessage_QtProtobufData> dptr;
};
namespace SimpleStringInt32MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 13,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleStringInt32MapMessage_QtProtobufNested

class SimpleSInt32Int64MapMessage_QtProtobufData;
class SimpleSInt32Int64MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleSInt32Int64MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleSInt32Int64MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::sint32, QtProtobuf::int64>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt32Int64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleSInt32Int64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt32Int64MapMessage(const SimpleSInt32Int64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt32Int64MapMessage &operator =(const SimpleSInt32Int64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt32Int64MapMessage(SimpleSInt32Int64MapMessage &&other) noexcept;
    SimpleSInt32Int64MapMessage &operator =(SimpleSInt32Int64MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleSInt32Int64MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleSInt32Int64MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleSInt32Int64MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleSInt32Int64MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleSInt32Int64MapMessage &lhs, const SimpleSInt32Int64MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleSInt32Int64MapMessage &lhs, const SimpleSInt32Int64MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleSInt32Int64MapMessage &lhs, const SimpleSInt32Int64MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleSInt32Int64MapMessage_QtProtobufData> dptr;
};
namespace SimpleSInt32Int64MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 1,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleSInt32Int64MapMessage_QtProtobufNested

class SimpleSInt64Int64MapMessage_QtProtobufData;
class SimpleSInt64Int64MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleSInt64Int64MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleSInt64Int64MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::sint64, QtProtobuf::int64>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt64Int64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleSInt64Int64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt64Int64MapMessage(const SimpleSInt64Int64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt64Int64MapMessage &operator =(const SimpleSInt64Int64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt64Int64MapMessage(SimpleSInt64Int64MapMessage &&other) noexcept;
    SimpleSInt64Int64MapMessage &operator =(SimpleSInt64Int64MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleSInt64Int64MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleSInt64Int64MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleSInt64Int64MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleSInt64Int64MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleSInt64Int64MapMessage &lhs, const SimpleSInt64Int64MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleSInt64Int64MapMessage &lhs, const SimpleSInt64Int64MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleSInt64Int64MapMessage &lhs, const SimpleSInt64Int64MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleSInt64Int64MapMessage_QtProtobufData> dptr;
};
namespace SimpleSInt64Int64MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 2,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleSInt64Int64MapMessage_QtProtobufNested

class SimpleInt32Int64MapMessage_QtProtobufData;
class SimpleInt32Int64MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleInt32Int64MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleInt32Int64MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::int32, QtProtobuf::int64>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt32Int64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleInt32Int64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt32Int64MapMessage(const SimpleInt32Int64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt32Int64MapMessage &operator =(const SimpleInt32Int64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt32Int64MapMessage(SimpleInt32Int64MapMessage &&other) noexcept;
    SimpleInt32Int64MapMessage &operator =(SimpleInt32Int64MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleInt32Int64MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleInt32Int64MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleInt32Int64MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleInt32Int64MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleInt32Int64MapMessage &lhs, const SimpleInt32Int64MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleInt32Int64MapMessage &lhs, const SimpleInt32Int64MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleInt32Int64MapMessage &lhs, const SimpleInt32Int64MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleInt32Int64MapMessage_QtProtobufData> dptr;
};
namespace SimpleInt32Int64MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 3,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleInt32Int64MapMessage_QtProtobufNested

class SimpleInt64Int64MapMessage_QtProtobufData;
class SimpleInt64Int64MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleInt64Int64MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleInt64Int64MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::int64, QtProtobuf::int64>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt64Int64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleInt64Int64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt64Int64MapMessage(const SimpleInt64Int64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt64Int64MapMessage &operator =(const SimpleInt64Int64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt64Int64MapMessage(SimpleInt64Int64MapMessage &&other) noexcept;
    SimpleInt64Int64MapMessage &operator =(SimpleInt64Int64MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleInt64Int64MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleInt64Int64MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleInt64Int64MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleInt64Int64MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleInt64Int64MapMessage &lhs, const SimpleInt64Int64MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleInt64Int64MapMessage &lhs, const SimpleInt64Int64MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleInt64Int64MapMessage &lhs, const SimpleInt64Int64MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleInt64Int64MapMessage_QtProtobufData> dptr;
};
namespace SimpleInt64Int64MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleInt64Int64MapMessage_QtProtobufNested

class SimpleUInt32Int64MapMessage_QtProtobufData;
class SimpleUInt32Int64MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleUInt32Int64MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleUInt32Int64MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::uint32, QtProtobuf::int64>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt32Int64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleUInt32Int64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt32Int64MapMessage(const SimpleUInt32Int64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt32Int64MapMessage &operator =(const SimpleUInt32Int64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt32Int64MapMessage(SimpleUInt32Int64MapMessage &&other) noexcept;
    SimpleUInt32Int64MapMessage &operator =(SimpleUInt32Int64MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleUInt32Int64MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleUInt32Int64MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleUInt32Int64MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleUInt32Int64MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleUInt32Int64MapMessage &lhs, const SimpleUInt32Int64MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleUInt32Int64MapMessage &lhs, const SimpleUInt32Int64MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleUInt32Int64MapMessage &lhs, const SimpleUInt32Int64MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleUInt32Int64MapMessage_QtProtobufData> dptr;
};
namespace SimpleUInt32Int64MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 5,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleUInt32Int64MapMessage_QtProtobufNested

class SimpleUInt64Int64MapMessage_QtProtobufData;
class SimpleUInt64Int64MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleUInt64Int64MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleUInt64Int64MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::uint64, QtProtobuf::int64>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt64Int64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleUInt64Int64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt64Int64MapMessage(const SimpleUInt64Int64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt64Int64MapMessage &operator =(const SimpleUInt64Int64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt64Int64MapMessage(SimpleUInt64Int64MapMessage &&other) noexcept;
    SimpleUInt64Int64MapMessage &operator =(SimpleUInt64Int64MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleUInt64Int64MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleUInt64Int64MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleUInt64Int64MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleUInt64Int64MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleUInt64Int64MapMessage &lhs, const SimpleUInt64Int64MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleUInt64Int64MapMessage &lhs, const SimpleUInt64Int64MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleUInt64Int64MapMessage &lhs, const SimpleUInt64Int64MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleUInt64Int64MapMessage_QtProtobufData> dptr;
};
namespace SimpleUInt64Int64MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 6,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleUInt64Int64MapMessage_QtProtobufNested

class SimpleFixed32Int64MapMessage_QtProtobufData;
class SimpleFixed32Int64MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleFixed32Int64MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleFixed32Int64MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::fixed32, QtProtobuf::int64>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed32Int64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleFixed32Int64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed32Int64MapMessage(const SimpleFixed32Int64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed32Int64MapMessage &operator =(const SimpleFixed32Int64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed32Int64MapMessage(SimpleFixed32Int64MapMessage &&other) noexcept;
    SimpleFixed32Int64MapMessage &operator =(SimpleFixed32Int64MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleFixed32Int64MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleFixed32Int64MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleFixed32Int64MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleFixed32Int64MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleFixed32Int64MapMessage &lhs, const SimpleFixed32Int64MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleFixed32Int64MapMessage &lhs, const SimpleFixed32Int64MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleFixed32Int64MapMessage &lhs, const SimpleFixed32Int64MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleFixed32Int64MapMessage_QtProtobufData> dptr;
};
namespace SimpleFixed32Int64MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 7,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleFixed32Int64MapMessage_QtProtobufNested

class SimpleFixed64Int64MapMessage_QtProtobufData;
class SimpleFixed64Int64MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleFixed64Int64MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleFixed64Int64MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::fixed64, QtProtobuf::int64>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed64Int64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleFixed64Int64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed64Int64MapMessage(const SimpleFixed64Int64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed64Int64MapMessage &operator =(const SimpleFixed64Int64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed64Int64MapMessage(SimpleFixed64Int64MapMessage &&other) noexcept;
    SimpleFixed64Int64MapMessage &operator =(SimpleFixed64Int64MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleFixed64Int64MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleFixed64Int64MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleFixed64Int64MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleFixed64Int64MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleFixed64Int64MapMessage &lhs, const SimpleFixed64Int64MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleFixed64Int64MapMessage &lhs, const SimpleFixed64Int64MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleFixed64Int64MapMessage &lhs, const SimpleFixed64Int64MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleFixed64Int64MapMessage_QtProtobufData> dptr;
};
namespace SimpleFixed64Int64MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 8,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleFixed64Int64MapMessage_QtProtobufNested

class SimpleSFixed32Int64MapMessage_QtProtobufData;
class SimpleSFixed32Int64MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleSFixed32Int64MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleSFixed32Int64MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::sfixed32, QtProtobuf::int64>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed32Int64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleSFixed32Int64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed32Int64MapMessage(const SimpleSFixed32Int64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed32Int64MapMessage &operator =(const SimpleSFixed32Int64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed32Int64MapMessage(SimpleSFixed32Int64MapMessage &&other) noexcept;
    SimpleSFixed32Int64MapMessage &operator =(SimpleSFixed32Int64MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleSFixed32Int64MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleSFixed32Int64MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleSFixed32Int64MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleSFixed32Int64MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleSFixed32Int64MapMessage &lhs, const SimpleSFixed32Int64MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleSFixed32Int64MapMessage &lhs, const SimpleSFixed32Int64MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleSFixed32Int64MapMessage &lhs, const SimpleSFixed32Int64MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleSFixed32Int64MapMessage_QtProtobufData> dptr;
};
namespace SimpleSFixed32Int64MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 9,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleSFixed32Int64MapMessage_QtProtobufNested

class SimpleSFixed64Int64MapMessage_QtProtobufData;
class SimpleSFixed64Int64MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleSFixed64Int64MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleSFixed64Int64MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::sfixed64, QtProtobuf::int64>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed64Int64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleSFixed64Int64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed64Int64MapMessage(const SimpleSFixed64Int64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed64Int64MapMessage &operator =(const SimpleSFixed64Int64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed64Int64MapMessage(SimpleSFixed64Int64MapMessage &&other) noexcept;
    SimpleSFixed64Int64MapMessage &operator =(SimpleSFixed64Int64MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleSFixed64Int64MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleSFixed64Int64MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleSFixed64Int64MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleSFixed64Int64MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleSFixed64Int64MapMessage &lhs, const SimpleSFixed64Int64MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleSFixed64Int64MapMessage &lhs, const SimpleSFixed64Int64MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleSFixed64Int64MapMessage &lhs, const SimpleSFixed64Int64MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleSFixed64Int64MapMessage_QtProtobufData> dptr;
};
namespace SimpleSFixed64Int64MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 10,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleSFixed64Int64MapMessage_QtProtobufNested

class SimpleStringInt64MapMessage_QtProtobufData;
class SimpleStringInt64MapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleStringInt64MapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleStringInt64MapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QString, QtProtobuf::int64>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleStringInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleStringInt64MapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleStringInt64MapMessage(const SimpleStringInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleStringInt64MapMessage &operator =(const SimpleStringInt64MapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleStringInt64MapMessage(SimpleStringInt64MapMessage &&other) noexcept;
    SimpleStringInt64MapMessage &operator =(SimpleStringInt64MapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleStringInt64MapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleStringInt64MapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleStringInt64MapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleStringInt64MapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleStringInt64MapMessage &lhs, const SimpleStringInt64MapMessage &rhs) noexcept;
    friend bool operator==(const SimpleStringInt64MapMessage &lhs, const SimpleStringInt64MapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleStringInt64MapMessage &lhs, const SimpleStringInt64MapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleStringInt64MapMessage_QtProtobufData> dptr;
};
namespace SimpleStringInt64MapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 13,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleStringInt64MapMessage_QtProtobufNested

class SimpleSInt32ComplexMessageMapMessage_QtProtobufData;
class SimpleSInt32ComplexMessageMapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleSInt32ComplexMessageMapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleSInt32ComplexMessageMapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::sint32, ComplexMessage>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt32ComplexMessageMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleSInt32ComplexMessageMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt32ComplexMessageMapMessage(const SimpleSInt32ComplexMessageMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt32ComplexMessageMapMessage &operator =(const SimpleSInt32ComplexMessageMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt32ComplexMessageMapMessage(SimpleSInt32ComplexMessageMapMessage &&other) noexcept;
    SimpleSInt32ComplexMessageMapMessage &operator =(SimpleSInt32ComplexMessageMapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleSInt32ComplexMessageMapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleSInt32ComplexMessageMapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleSInt32ComplexMessageMapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleSInt32ComplexMessageMapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleSInt32ComplexMessageMapMessage &lhs, const SimpleSInt32ComplexMessageMapMessage &rhs) noexcept;
    friend bool operator==(const SimpleSInt32ComplexMessageMapMessage &lhs, const SimpleSInt32ComplexMessageMapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleSInt32ComplexMessageMapMessage &lhs, const SimpleSInt32ComplexMessageMapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleSInt32ComplexMessageMapMessage_QtProtobufData> dptr;
};
namespace SimpleSInt32ComplexMessageMapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 1,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleSInt32ComplexMessageMapMessage_QtProtobufNested

class SimpleSInt64ComplexMessageMapMessage_QtProtobufData;
class SimpleSInt64ComplexMessageMapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleSInt64ComplexMessageMapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleSInt64ComplexMessageMapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::sint64, ComplexMessage>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt64ComplexMessageMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleSInt64ComplexMessageMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt64ComplexMessageMapMessage(const SimpleSInt64ComplexMessageMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt64ComplexMessageMapMessage &operator =(const SimpleSInt64ComplexMessageMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSInt64ComplexMessageMapMessage(SimpleSInt64ComplexMessageMapMessage &&other) noexcept;
    SimpleSInt64ComplexMessageMapMessage &operator =(SimpleSInt64ComplexMessageMapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleSInt64ComplexMessageMapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleSInt64ComplexMessageMapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleSInt64ComplexMessageMapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleSInt64ComplexMessageMapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleSInt64ComplexMessageMapMessage &lhs, const SimpleSInt64ComplexMessageMapMessage &rhs) noexcept;
    friend bool operator==(const SimpleSInt64ComplexMessageMapMessage &lhs, const SimpleSInt64ComplexMessageMapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleSInt64ComplexMessageMapMessage &lhs, const SimpleSInt64ComplexMessageMapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleSInt64ComplexMessageMapMessage_QtProtobufData> dptr;
};
namespace SimpleSInt64ComplexMessageMapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 2,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleSInt64ComplexMessageMapMessage_QtProtobufNested

class SimpleInt32ComplexMessageMapMessage_QtProtobufData;
class SimpleInt32ComplexMessageMapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleInt32ComplexMessageMapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleInt32ComplexMessageMapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::int32, ComplexMessage>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt32ComplexMessageMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleInt32ComplexMessageMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt32ComplexMessageMapMessage(const SimpleInt32ComplexMessageMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt32ComplexMessageMapMessage &operator =(const SimpleInt32ComplexMessageMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt32ComplexMessageMapMessage(SimpleInt32ComplexMessageMapMessage &&other) noexcept;
    SimpleInt32ComplexMessageMapMessage &operator =(SimpleInt32ComplexMessageMapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleInt32ComplexMessageMapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleInt32ComplexMessageMapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleInt32ComplexMessageMapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleInt32ComplexMessageMapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleInt32ComplexMessageMapMessage &lhs, const SimpleInt32ComplexMessageMapMessage &rhs) noexcept;
    friend bool operator==(const SimpleInt32ComplexMessageMapMessage &lhs, const SimpleInt32ComplexMessageMapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleInt32ComplexMessageMapMessage &lhs, const SimpleInt32ComplexMessageMapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleInt32ComplexMessageMapMessage_QtProtobufData> dptr;
};
namespace SimpleInt32ComplexMessageMapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 3,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleInt32ComplexMessageMapMessage_QtProtobufNested

class SimpleInt64ComplexMessageMapMessage_QtProtobufData;
class SimpleInt64ComplexMessageMapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleInt64ComplexMessageMapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleInt64ComplexMessageMapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::int64, ComplexMessage>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt64ComplexMessageMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleInt64ComplexMessageMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt64ComplexMessageMapMessage(const SimpleInt64ComplexMessageMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt64ComplexMessageMapMessage &operator =(const SimpleInt64ComplexMessageMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleInt64ComplexMessageMapMessage(SimpleInt64ComplexMessageMapMessage &&other) noexcept;
    SimpleInt64ComplexMessageMapMessage &operator =(SimpleInt64ComplexMessageMapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleInt64ComplexMessageMapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleInt64ComplexMessageMapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleInt64ComplexMessageMapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleInt64ComplexMessageMapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleInt64ComplexMessageMapMessage &lhs, const SimpleInt64ComplexMessageMapMessage &rhs) noexcept;
    friend bool operator==(const SimpleInt64ComplexMessageMapMessage &lhs, const SimpleInt64ComplexMessageMapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleInt64ComplexMessageMapMessage &lhs, const SimpleInt64ComplexMessageMapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleInt64ComplexMessageMapMessage_QtProtobufData> dptr;
};
namespace SimpleInt64ComplexMessageMapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 4,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleInt64ComplexMessageMapMessage_QtProtobufNested

class SimpleUInt32ComplexMessageMapMessage_QtProtobufData;
class SimpleUInt32ComplexMessageMapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleUInt32ComplexMessageMapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleUInt32ComplexMessageMapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::uint32, ComplexMessage>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt32ComplexMessageMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleUInt32ComplexMessageMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt32ComplexMessageMapMessage(const SimpleUInt32ComplexMessageMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt32ComplexMessageMapMessage &operator =(const SimpleUInt32ComplexMessageMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt32ComplexMessageMapMessage(SimpleUInt32ComplexMessageMapMessage &&other) noexcept;
    SimpleUInt32ComplexMessageMapMessage &operator =(SimpleUInt32ComplexMessageMapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleUInt32ComplexMessageMapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleUInt32ComplexMessageMapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleUInt32ComplexMessageMapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleUInt32ComplexMessageMapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleUInt32ComplexMessageMapMessage &lhs, const SimpleUInt32ComplexMessageMapMessage &rhs) noexcept;
    friend bool operator==(const SimpleUInt32ComplexMessageMapMessage &lhs, const SimpleUInt32ComplexMessageMapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleUInt32ComplexMessageMapMessage &lhs, const SimpleUInt32ComplexMessageMapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleUInt32ComplexMessageMapMessage_QtProtobufData> dptr;
};
namespace SimpleUInt32ComplexMessageMapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 5,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleUInt32ComplexMessageMapMessage_QtProtobufNested

class SimpleUInt64ComplexMessageMapMessage_QtProtobufData;
class SimpleUInt64ComplexMessageMapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleUInt64ComplexMessageMapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleUInt64ComplexMessageMapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::uint64, ComplexMessage>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt64ComplexMessageMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleUInt64ComplexMessageMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt64ComplexMessageMapMessage(const SimpleUInt64ComplexMessageMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt64ComplexMessageMapMessage &operator =(const SimpleUInt64ComplexMessageMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleUInt64ComplexMessageMapMessage(SimpleUInt64ComplexMessageMapMessage &&other) noexcept;
    SimpleUInt64ComplexMessageMapMessage &operator =(SimpleUInt64ComplexMessageMapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleUInt64ComplexMessageMapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleUInt64ComplexMessageMapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleUInt64ComplexMessageMapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleUInt64ComplexMessageMapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleUInt64ComplexMessageMapMessage &lhs, const SimpleUInt64ComplexMessageMapMessage &rhs) noexcept;
    friend bool operator==(const SimpleUInt64ComplexMessageMapMessage &lhs, const SimpleUInt64ComplexMessageMapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleUInt64ComplexMessageMapMessage &lhs, const SimpleUInt64ComplexMessageMapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleUInt64ComplexMessageMapMessage_QtProtobufData> dptr;
};
namespace SimpleUInt64ComplexMessageMapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 6,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleUInt64ComplexMessageMapMessage_QtProtobufNested

class SimpleFixed32ComplexMessageMapMessage_QtProtobufData;
class SimpleFixed32ComplexMessageMapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleFixed32ComplexMessageMapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleFixed32ComplexMessageMapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::fixed32, ComplexMessage>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed32ComplexMessageMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleFixed32ComplexMessageMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed32ComplexMessageMapMessage(const SimpleFixed32ComplexMessageMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed32ComplexMessageMapMessage &operator =(const SimpleFixed32ComplexMessageMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed32ComplexMessageMapMessage(SimpleFixed32ComplexMessageMapMessage &&other) noexcept;
    SimpleFixed32ComplexMessageMapMessage &operator =(SimpleFixed32ComplexMessageMapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleFixed32ComplexMessageMapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleFixed32ComplexMessageMapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleFixed32ComplexMessageMapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleFixed32ComplexMessageMapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleFixed32ComplexMessageMapMessage &lhs, const SimpleFixed32ComplexMessageMapMessage &rhs) noexcept;
    friend bool operator==(const SimpleFixed32ComplexMessageMapMessage &lhs, const SimpleFixed32ComplexMessageMapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleFixed32ComplexMessageMapMessage &lhs, const SimpleFixed32ComplexMessageMapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleFixed32ComplexMessageMapMessage_QtProtobufData> dptr;
};
namespace SimpleFixed32ComplexMessageMapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 7,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleFixed32ComplexMessageMapMessage_QtProtobufNested

class SimpleFixed64ComplexMessageMapMessage_QtProtobufData;
class SimpleFixed64ComplexMessageMapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleFixed64ComplexMessageMapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleFixed64ComplexMessageMapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::fixed64, ComplexMessage>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed64ComplexMessageMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleFixed64ComplexMessageMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed64ComplexMessageMapMessage(const SimpleFixed64ComplexMessageMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed64ComplexMessageMapMessage &operator =(const SimpleFixed64ComplexMessageMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleFixed64ComplexMessageMapMessage(SimpleFixed64ComplexMessageMapMessage &&other) noexcept;
    SimpleFixed64ComplexMessageMapMessage &operator =(SimpleFixed64ComplexMessageMapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleFixed64ComplexMessageMapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleFixed64ComplexMessageMapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleFixed64ComplexMessageMapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleFixed64ComplexMessageMapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleFixed64ComplexMessageMapMessage &lhs, const SimpleFixed64ComplexMessageMapMessage &rhs) noexcept;
    friend bool operator==(const SimpleFixed64ComplexMessageMapMessage &lhs, const SimpleFixed64ComplexMessageMapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleFixed64ComplexMessageMapMessage &lhs, const SimpleFixed64ComplexMessageMapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleFixed64ComplexMessageMapMessage_QtProtobufData> dptr;
};
namespace SimpleFixed64ComplexMessageMapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 8,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleFixed64ComplexMessageMapMessage_QtProtobufNested

class SimpleSFixed32ComplexMessageMapMessage_QtProtobufData;
class SimpleSFixed32ComplexMessageMapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleSFixed32ComplexMessageMapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleSFixed32ComplexMessageMapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::sfixed32, ComplexMessage>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed32ComplexMessageMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleSFixed32ComplexMessageMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed32ComplexMessageMapMessage(const SimpleSFixed32ComplexMessageMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed32ComplexMessageMapMessage &operator =(const SimpleSFixed32ComplexMessageMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed32ComplexMessageMapMessage(SimpleSFixed32ComplexMessageMapMessage &&other) noexcept;
    SimpleSFixed32ComplexMessageMapMessage &operator =(SimpleSFixed32ComplexMessageMapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleSFixed32ComplexMessageMapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleSFixed32ComplexMessageMapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleSFixed32ComplexMessageMapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleSFixed32ComplexMessageMapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleSFixed32ComplexMessageMapMessage &lhs, const SimpleSFixed32ComplexMessageMapMessage &rhs) noexcept;
    friend bool operator==(const SimpleSFixed32ComplexMessageMapMessage &lhs, const SimpleSFixed32ComplexMessageMapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleSFixed32ComplexMessageMapMessage &lhs, const SimpleSFixed32ComplexMessageMapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleSFixed32ComplexMessageMapMessage_QtProtobufData> dptr;
};
namespace SimpleSFixed32ComplexMessageMapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 9,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleSFixed32ComplexMessageMapMessage_QtProtobufNested

class SimpleSFixed64ComplexMessageMapMessage_QtProtobufData;
class SimpleSFixed64ComplexMessageMapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleSFixed64ComplexMessageMapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleSFixed64ComplexMessageMapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QtProtobuf::sfixed64, ComplexMessage>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed64ComplexMessageMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleSFixed64ComplexMessageMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed64ComplexMessageMapMessage(const SimpleSFixed64ComplexMessageMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed64ComplexMessageMapMessage &operator =(const SimpleSFixed64ComplexMessageMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleSFixed64ComplexMessageMapMessage(SimpleSFixed64ComplexMessageMapMessage &&other) noexcept;
    SimpleSFixed64ComplexMessageMapMessage &operator =(SimpleSFixed64ComplexMessageMapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleSFixed64ComplexMessageMapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleSFixed64ComplexMessageMapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleSFixed64ComplexMessageMapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleSFixed64ComplexMessageMapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleSFixed64ComplexMessageMapMessage &lhs, const SimpleSFixed64ComplexMessageMapMessage &rhs) noexcept;
    friend bool operator==(const SimpleSFixed64ComplexMessageMapMessage &lhs, const SimpleSFixed64ComplexMessageMapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleSFixed64ComplexMessageMapMessage &lhs, const SimpleSFixed64ComplexMessageMapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleSFixed64ComplexMessageMapMessage_QtProtobufData> dptr;
};
namespace SimpleSFixed64ComplexMessageMapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 10,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleSFixed64ComplexMessageMapMessage_QtProtobufNested

class SimpleStringComplexMessageMapMessage_QtProtobufData;
class SimpleStringComplexMessageMapMessage : public QProtobufMessage
{
    Q_PROTOBUF_OBJECT_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)
    Q_PROPERTY(qtprotobufnamespace::tests::SimpleStringComplexMessageMapMessage::MapFieldEntry mapField READ mapField WRITE setMapField SCRIPTABLE true)

public:
    using QtProtobufFieldEnum = SimpleStringComplexMessageMapMessage_QtProtobufNested::QtProtobufFieldEnum;
    using MapFieldEntry = QHash<QString, ComplexMessage>;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleStringComplexMessageMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT ~SimpleStringComplexMessageMapMessage();
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleStringComplexMessageMapMessage(const SimpleStringComplexMessageMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleStringComplexMessageMapMessage &operator =(const SimpleStringComplexMessageMapMessage &other);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT SimpleStringComplexMessageMapMessage(SimpleStringComplexMessageMapMessage &&other) noexcept;
    SimpleStringComplexMessageMapMessage &operator =(SimpleStringComplexMessageMapMessage &&other) noexcept
    {
        swap(other);
        return *this;
    }
    void swap(SimpleStringComplexMessageMapMessage &other) noexcept
    {
        QProtobufMessage::swap(other);
        dptr.swap(other.dptr);
    }

    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT const SimpleStringComplexMessageMapMessage::MapFieldEntry &mapField() const &;
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(const SimpleStringComplexMessageMapMessage::MapFieldEntry &mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT void setMapField(SimpleStringComplexMessageMapMessage::MapFieldEntry &&mapField);
    QPB_TST_QTPROTOBUFGEN_GEN_EXPORT static void registerTypes();

private:
    friend QPB_TST_QTPROTOBUFGEN_GEN_EXPORT bool comparesEqual(const SimpleStringComplexMessageMapMessage &lhs, const SimpleStringComplexMessageMapMessage &rhs) noexcept;
    friend bool operator==(const SimpleStringComplexMessageMapMessage &lhs, const SimpleStringComplexMessageMapMessage &rhs) noexcept
    {
        return comparesEqual(lhs, rhs);
    }
    friend bool operator!=(const SimpleStringComplexMessageMapMessage &lhs, const SimpleStringComplexMessageMapMessage &rhs) noexcept
    {
        return !comparesEqual(lhs, rhs);
    }
    QExplicitlySharedDataPointer<SimpleStringComplexMessageMapMessage_QtProtobufData> dptr;
};
namespace SimpleStringComplexMessageMapMessage_QtProtobufNested {
Q_NAMESPACE_EXPORT(QPB_TST_QTPROTOBUFGEN_GEN_EXPORT)

enum class QtProtobufFieldEnum {
    MapFieldProtoFieldNumber = 13,
};
Q_ENUM_NS(QtProtobufFieldEnum)

} // namespace SimpleStringComplexMessageMapMessage_QtProtobufNested
} // namespace qtprotobufnamespace::tests

#endif // MAPMESSAGES_QPB_H
