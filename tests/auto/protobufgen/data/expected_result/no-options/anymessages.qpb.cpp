/* This file is autogenerated. DO NOT CHANGE. All changes will be lost */

#include "anymessages.qpb.h"
#include <QProtobufSerializer>

namespace qtproto::tests {
AnyMessage::~AnyMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 5> qt_protobuf_AnyMessage_uint_data;
    const char qt_protobuf_AnyMessage_char_data[32];
} qt_protobuf_AnyMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
        4, /* = field flags offset */
        24, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        25, /* = field */
        31, /* = end-of-string-marker */
        // Field numbers:
        1, /* = field */
        // Property indices:
        0, /* = field */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = field */
    },
    // char_data
    /* metadata char_data: */
    "qtproto.tests.AnyMessage\0" /* = full message name */
    /* field char_data: */
    "field\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering AnyMessage::propertyOrdering = {
    &qt_protobuf_AnyMessage_metadata.data
};

void AnyMessage::registerTypes()
{
    qRegisterMetaType<AnyMessage>();
    qRegisterMetaType<AnyMessageRepeated>();
}
AnyMessage::AnyMessage() : QProtobufMessage(&AnyMessage::staticMetaObject)
{
}
AnyMessage::AnyMessage(const AnyMessage &other) : QProtobufMessage(other),
    m_field(other.m_field)
{
}
AnyMessage &AnyMessage::operator =(const AnyMessage &other)
{
    QProtobufMessage::operator=(other);
    setField(other.m_field);
    return *this;
}
AnyMessage::AnyMessage(AnyMessage &&other) noexcept : QProtobufMessage(std::move(other))
{
    m_field = std::move(other.m_field);
}
AnyMessage &AnyMessage::operator =(AnyMessage &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    if (m_field != other.m_field)
        m_field = std::move(other.m_field);
    return *this;
}
bool AnyMessage::operator ==(const AnyMessage &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && m_field == other.m_field;
}
bool AnyMessage::operator !=(const AnyMessage &other) const
{
    return !this->operator ==(other);
}

void AnyMessage::setField(const QtProtobuf::Any &field)
{
    if (m_field != field)
        m_field = field;
}

RepeatedAnyMessage::~RepeatedAnyMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 5> qt_protobuf_RepeatedAnyMessage_uint_data;
    const char qt_protobuf_RepeatedAnyMessage_char_data[39];
} qt_protobuf_RepeatedAnyMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
        4, /* = field flags offset */
        32, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        33, /* = anys */
        38, /* = end-of-string-marker */
        // Field numbers:
        1, /* = anys */
        // Property indices:
        0, /* = anys */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = anys */
    },
    // char_data
    /* metadata char_data: */
    "qtproto.tests.RepeatedAnyMessage\0" /* = full message name */
    /* field char_data: */
    "anys\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering RepeatedAnyMessage::propertyOrdering = {
    &qt_protobuf_RepeatedAnyMessage_metadata.data
};

void RepeatedAnyMessage::registerTypes()
{
    qRegisterMetaType<RepeatedAnyMessage>();
    qRegisterMetaType<RepeatedAnyMessageRepeated>();
}
RepeatedAnyMessage::RepeatedAnyMessage() : QProtobufMessage(&RepeatedAnyMessage::staticMetaObject)
{
}
RepeatedAnyMessage::RepeatedAnyMessage(const RepeatedAnyMessage &other) : QProtobufMessage(other),
    m_anys(other.m_anys)
{
}
RepeatedAnyMessage &RepeatedAnyMessage::operator =(const RepeatedAnyMessage &other)
{
    QProtobufMessage::operator=(other);
    setAnys(other.m_anys);
    return *this;
}
RepeatedAnyMessage::RepeatedAnyMessage(RepeatedAnyMessage &&other) noexcept : QProtobufMessage(std::move(other))
{
    m_anys = std::move(other.m_anys);
}
RepeatedAnyMessage &RepeatedAnyMessage::operator =(RepeatedAnyMessage &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    if (m_anys != other.m_anys)
        m_anys = std::move(other.m_anys);
    return *this;
}
bool RepeatedAnyMessage::operator ==(const RepeatedAnyMessage &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && QtProtobuf::repeatedValueCompare(m_anys, other.m_anys);
}
bool RepeatedAnyMessage::operator !=(const RepeatedAnyMessage &other) const
{
    return !this->operator ==(other);
}

void RepeatedAnyMessage::setAnys(const QList<QtProtobuf::Any> &anys)
{
    if (m_anys != anys)
        m_anys = anys;
}

TwoAnyMessage::~TwoAnyMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 9> qt_protobuf_TwoAnyMessage_uint_data;
    const char qt_protobuf_TwoAnyMessage_char_data[37];
} qt_protobuf_TwoAnyMessage_metadata {
    // data
    {
        0, /* = version */
        2, /* = num fields */
        3, /* = field number offset */
        5, /* = property index offset */
        7, /* = field flags offset */
        27, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        28, /* = one */
        32, /* = two */
        36, /* = end-of-string-marker */
        // Field numbers:
        1, /* = one */
        2, /* = two */
        // Property indices:
        0, /* = one */
        1, /* = two */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = one */
        QtProtobufPrivate::NoFlags, /* = two */
    },
    // char_data
    /* metadata char_data: */
    "qtproto.tests.TwoAnyMessage\0" /* = full message name */
    /* field char_data: */
    "one\0two\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering TwoAnyMessage::propertyOrdering = {
    &qt_protobuf_TwoAnyMessage_metadata.data
};

void TwoAnyMessage::registerTypes()
{
    qRegisterMetaType<TwoAnyMessage>();
    qRegisterMetaType<TwoAnyMessageRepeated>();
}
TwoAnyMessage::TwoAnyMessage() : QProtobufMessage(&TwoAnyMessage::staticMetaObject)
{
}
TwoAnyMessage::TwoAnyMessage(const TwoAnyMessage &other) : QProtobufMessage(other),
    m_one(other.m_one),
    m_two(other.m_two)
{
}
TwoAnyMessage &TwoAnyMessage::operator =(const TwoAnyMessage &other)
{
    QProtobufMessage::operator=(other);
    setOne(other.m_one);
    setTwo(other.m_two);
    return *this;
}
TwoAnyMessage::TwoAnyMessage(TwoAnyMessage &&other) noexcept : QProtobufMessage(std::move(other))
{
    m_one = std::move(other.m_one);
    m_two = std::move(other.m_two);
}
TwoAnyMessage &TwoAnyMessage::operator =(TwoAnyMessage &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    if (m_one != other.m_one)
        m_one = std::move(other.m_one);
    if (m_two != other.m_two)
        m_two = std::move(other.m_two);
    return *this;
}
bool TwoAnyMessage::operator ==(const TwoAnyMessage &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && m_one == other.m_one
        && m_two == other.m_two;
}
bool TwoAnyMessage::operator !=(const TwoAnyMessage &other) const
{
    return !this->operator ==(other);
}

void TwoAnyMessage::setOne(const QtProtobuf::Any &one)
{
    if (m_one != one)
        m_one = one;
}

void TwoAnyMessage::setTwo(const QtProtobuf::Any &two)
{
    if (m_two != two)
        m_two = two;
}

Example::~Example() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 21> qt_protobuf_Example_uint_data;
    const char qt_protobuf_Example_char_data[38];
} qt_protobuf_Example_metadata {
    // data
    {
        0, /* = version */
        5, /* = num fields */
        6, /* = field number offset */
        11, /* = property index offset */
        16, /* = field flags offset */
        21, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        22, /* = str */
        26, /* = i */
        28, /* = j */
        30, /* = h */
        32, /* = str2 */
        37, /* = end-of-string-marker */
        // Field numbers:
        1, /* = str */
        2, /* = i */
        3, /* = j */
        4, /* = h */
        5, /* = str2 */
        // Property indices:
        0, /* = str */
        1, /* = i */
        2, /* = j */
        3, /* = h */
        4, /* = str2 */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = str */
        QtProtobufPrivate::NoFlags, /* = i */
        QtProtobufPrivate::NoFlags, /* = j */
        QtProtobufPrivate::NoFlags, /* = h */
        QtProtobufPrivate::NoFlags, /* = str2 */
    },
    // char_data
    /* metadata char_data: */
    "qtproto.tests.Example\0" /* = full message name */
    /* field char_data: */
    "str\0i\0j\0h\0str2\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering Example::propertyOrdering = {
    &qt_protobuf_Example_metadata.data
};

void Example::registerTypes()
{
    qRegisterMetaType<Example>();
    qRegisterMetaType<ExampleRepeated>();
}
Example::Example() : QProtobufMessage(&Example::staticMetaObject),
    m_i(0),
    m_j(0),
    m_h(0)
{
}
Example::Example(const Example &other) : QProtobufMessage(other),
    m_str(other.m_str),
    m_i(other.m_i),
    m_j(other.m_j),
    m_h(other.m_h),
    m_str2(other.m_str2)
{
}
Example &Example::operator =(const Example &other)
{
    QProtobufMessage::operator=(other);
    setStr(other.m_str);
    setI(other.m_i);
    setJ(other.m_j);
    setH(other.m_h);
    setStr2(other.m_str2);
    return *this;
}
Example::Example(Example &&other) noexcept : QProtobufMessage(std::move(other))
{
    m_str = std::move(other.m_str);
    setI(std::exchange(other.m_i, 0));
    setJ(std::exchange(other.m_j, 0));
    setH(std::exchange(other.m_h, 0));
    m_str2 = std::move(other.m_str2);
}
Example &Example::operator =(Example &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    if (m_str != other.m_str)
        m_str = std::move(other.m_str);
    setI(std::exchange(other.m_i, 0));
    setJ(std::exchange(other.m_j, 0));
    setH(std::exchange(other.m_h, 0));
    if (m_str2 != other.m_str2)
        m_str2 = std::move(other.m_str2);
    return *this;
}
bool Example::operator ==(const Example &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && m_str == other.m_str
        && m_i == other.m_i
        && m_j == other.m_j
        && m_h == other.m_h
        && m_str2 == other.m_str2;
}
bool Example::operator !=(const Example &other) const
{
    return !this->operator ==(other);
}

void Example::setStr(const QString &str)
{
    if (m_str != str)
        m_str = str;
}

void Example::setStr2(const QString &str2)
{
    if (m_str2 != str2)
        m_str2 = str2;
}

SimpleMessage::~SimpleMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 5> qt_protobuf_SimpleMessage_uint_data;
    const char qt_protobuf_SimpleMessage_char_data[31];
} qt_protobuf_SimpleMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
        4, /* = field flags offset */
        27, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        28, /* = i */
        30, /* = end-of-string-marker */
        // Field numbers:
        500000, /* = i */
        // Property indices:
        0, /* = i */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = i */
    },
    // char_data
    /* metadata char_data: */
    "qtproto.tests.SimpleMessage\0" /* = full message name */
    /* field char_data: */
    "i\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleMessage::propertyOrdering = {
    &qt_protobuf_SimpleMessage_metadata.data
};

void SimpleMessage::registerTypes()
{
    qRegisterMetaType<SimpleMessage>();
    qRegisterMetaType<SimpleMessageRepeated>();
}
SimpleMessage::SimpleMessage() : QProtobufMessage(&SimpleMessage::staticMetaObject),
    m_i(0)
{
}
SimpleMessage::SimpleMessage(const SimpleMessage &other) : QProtobufMessage(other),
    m_i(other.m_i)
{
}
SimpleMessage &SimpleMessage::operator =(const SimpleMessage &other)
{
    QProtobufMessage::operator=(other);
    setI(other.m_i);
    return *this;
}
SimpleMessage::SimpleMessage(SimpleMessage &&other) noexcept : QProtobufMessage(std::move(other))
{
    setI(std::exchange(other.m_i, 0));
}
SimpleMessage &SimpleMessage::operator =(SimpleMessage &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    setI(std::exchange(other.m_i, 0));
    return *this;
}
bool SimpleMessage::operator ==(const SimpleMessage &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && m_i == other.m_i;
}
bool SimpleMessage::operator !=(const SimpleMessage &other) const
{
    return !this->operator ==(other);
}

} // namespace qtproto::tests

#include "moc_anymessages.qpb.cpp"
