/* This file is autogenerated. DO NOT CHANGE. All changes will be lost */


#include "repeatednonpackedmessages.qpb.h"

#include <QtProtobuf/qprotobufregistration.h>

#include <cmath>

namespace qtprotobufnamespace::tests {

class RepeatedNonPackedIntMessage_QtProtobufData : public QSharedData
{
public:
    RepeatedNonPackedIntMessage_QtProtobufData()
        : QSharedData()
    {
    }

    RepeatedNonPackedIntMessage_QtProtobufData(const RepeatedNonPackedIntMessage_QtProtobufData &other)
        : QSharedData(other),
          m_testRepeatedInt(other.m_testRepeatedInt)
    {
    }

    QtProtobuf::int32List m_testRepeatedInt;
};

RepeatedNonPackedIntMessage::~RepeatedNonPackedIntMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 5> qt_protobuf_RepeatedNonPackedIntMessage_uint_data;
    const char qt_protobuf_RepeatedNonPackedIntMessage_char_data[71];
} qt_protobuf_RepeatedNonPackedIntMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
        4, /* = field flags offset */
        53, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        54, /* = testRepeatedInt */
        70, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testRepeatedInt */
        // Property indices:
        0, /* = testRepeatedInt */
        // Field flags:
        uint(QtProtobufPrivate::FieldFlag::NonPacked | QtProtobufPrivate::FieldFlag::Repeated), /* = testRepeatedInt */
    },
    // char_data
    /* metadata char_data: */
    "qtprotobufnamespace.tests.RepeatedNonPackedIntMessage\0" /* = full message name */
    /* field char_data: */
    "testRepeatedInt\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering RepeatedNonPackedIntMessage::staticPropertyOrdering = {
    &qt_protobuf_RepeatedNonPackedIntMessage_metadata.data
};

void RepeatedNonPackedIntMessage::registerTypes()
{
    qRegisterMetaType<RepeatedNonPackedIntMessage>();
    qRegisterMetaType<RepeatedNonPackedIntMessageRepeated>();
}

RepeatedNonPackedIntMessage::RepeatedNonPackedIntMessage()
    : QProtobufMessage(&RepeatedNonPackedIntMessage::staticMetaObject, &RepeatedNonPackedIntMessage::staticPropertyOrdering),
      dptr(new RepeatedNonPackedIntMessage_QtProtobufData)
{
}

RepeatedNonPackedIntMessage::RepeatedNonPackedIntMessage(const RepeatedNonPackedIntMessage &other)
    = default;
RepeatedNonPackedIntMessage &RepeatedNonPackedIntMessage::operator =(const RepeatedNonPackedIntMessage &other)
{
    RepeatedNonPackedIntMessage temp(other);
    swap(temp);
    return *this;
}
RepeatedNonPackedIntMessage::RepeatedNonPackedIntMessage(RepeatedNonPackedIntMessage &&other) noexcept
    = default;
bool comparesEqual(const RepeatedNonPackedIntMessage &lhs, const RepeatedNonPackedIntMessage &rhs) noexcept
{
    return operator ==(static_cast<const QProtobufMessage&>(lhs),
                       static_cast<const QProtobufMessage&>(rhs))
        && lhs.dptr->m_testRepeatedInt == rhs.dptr->m_testRepeatedInt;
}

const QtProtobuf::int32List &RepeatedNonPackedIntMessage::testRepeatedInt() const &
{
    return dptr->m_testRepeatedInt;
}

void RepeatedNonPackedIntMessage::setTestRepeatedInt(const QtProtobuf::int32List &testRepeatedInt)
{
    if (dptr->m_testRepeatedInt != testRepeatedInt) {
        dptr.detach();
        dptr->m_testRepeatedInt = testRepeatedInt;
    }
}

void RepeatedNonPackedIntMessage::setTestRepeatedInt(QtProtobuf::int32List &&testRepeatedInt)
{
    if (dptr->m_testRepeatedInt != testRepeatedInt) {
        dptr.detach();
        dptr->m_testRepeatedInt = std::move(testRepeatedInt);
    }
}


class RepeatedNonPackedSIntMessage_QtProtobufData : public QSharedData
{
public:
    RepeatedNonPackedSIntMessage_QtProtobufData()
        : QSharedData()
    {
    }

    RepeatedNonPackedSIntMessage_QtProtobufData(const RepeatedNonPackedSIntMessage_QtProtobufData &other)
        : QSharedData(other),
          m_testRepeatedInt(other.m_testRepeatedInt)
    {
    }

    QtProtobuf::sint32List m_testRepeatedInt;
};

RepeatedNonPackedSIntMessage::~RepeatedNonPackedSIntMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 5> qt_protobuf_RepeatedNonPackedSIntMessage_uint_data;
    const char qt_protobuf_RepeatedNonPackedSIntMessage_char_data[72];
} qt_protobuf_RepeatedNonPackedSIntMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
        4, /* = field flags offset */
        54, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        55, /* = testRepeatedInt */
        71, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testRepeatedInt */
        // Property indices:
        0, /* = testRepeatedInt */
        // Field flags:
        uint(QtProtobufPrivate::FieldFlag::NonPacked | QtProtobufPrivate::FieldFlag::Repeated), /* = testRepeatedInt */
    },
    // char_data
    /* metadata char_data: */
    "qtprotobufnamespace.tests.RepeatedNonPackedSIntMessage\0" /* = full message name */
    /* field char_data: */
    "testRepeatedInt\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering RepeatedNonPackedSIntMessage::staticPropertyOrdering = {
    &qt_protobuf_RepeatedNonPackedSIntMessage_metadata.data
};

void RepeatedNonPackedSIntMessage::registerTypes()
{
    qRegisterMetaType<RepeatedNonPackedSIntMessage>();
    qRegisterMetaType<RepeatedNonPackedSIntMessageRepeated>();
}

RepeatedNonPackedSIntMessage::RepeatedNonPackedSIntMessage()
    : QProtobufMessage(&RepeatedNonPackedSIntMessage::staticMetaObject, &RepeatedNonPackedSIntMessage::staticPropertyOrdering),
      dptr(new RepeatedNonPackedSIntMessage_QtProtobufData)
{
}

RepeatedNonPackedSIntMessage::RepeatedNonPackedSIntMessage(const RepeatedNonPackedSIntMessage &other)
    = default;
RepeatedNonPackedSIntMessage &RepeatedNonPackedSIntMessage::operator =(const RepeatedNonPackedSIntMessage &other)
{
    RepeatedNonPackedSIntMessage temp(other);
    swap(temp);
    return *this;
}
RepeatedNonPackedSIntMessage::RepeatedNonPackedSIntMessage(RepeatedNonPackedSIntMessage &&other) noexcept
    = default;
bool comparesEqual(const RepeatedNonPackedSIntMessage &lhs, const RepeatedNonPackedSIntMessage &rhs) noexcept
{
    return operator ==(static_cast<const QProtobufMessage&>(lhs),
                       static_cast<const QProtobufMessage&>(rhs))
        && lhs.dptr->m_testRepeatedInt == rhs.dptr->m_testRepeatedInt;
}

const QtProtobuf::sint32List &RepeatedNonPackedSIntMessage::testRepeatedInt() const &
{
    return dptr->m_testRepeatedInt;
}

void RepeatedNonPackedSIntMessage::setTestRepeatedInt(const QtProtobuf::sint32List &testRepeatedInt)
{
    if (dptr->m_testRepeatedInt != testRepeatedInt) {
        dptr.detach();
        dptr->m_testRepeatedInt = testRepeatedInt;
    }
}

void RepeatedNonPackedSIntMessage::setTestRepeatedInt(QtProtobuf::sint32List &&testRepeatedInt)
{
    if (dptr->m_testRepeatedInt != testRepeatedInt) {
        dptr.detach();
        dptr->m_testRepeatedInt = std::move(testRepeatedInt);
    }
}


class RepeatedNonPackedUIntMessage_QtProtobufData : public QSharedData
{
public:
    RepeatedNonPackedUIntMessage_QtProtobufData()
        : QSharedData()
    {
    }

    RepeatedNonPackedUIntMessage_QtProtobufData(const RepeatedNonPackedUIntMessage_QtProtobufData &other)
        : QSharedData(other),
          m_testRepeatedInt(other.m_testRepeatedInt)
    {
    }

    QtProtobuf::uint32List m_testRepeatedInt;
};

RepeatedNonPackedUIntMessage::~RepeatedNonPackedUIntMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 5> qt_protobuf_RepeatedNonPackedUIntMessage_uint_data;
    const char qt_protobuf_RepeatedNonPackedUIntMessage_char_data[72];
} qt_protobuf_RepeatedNonPackedUIntMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
        4, /* = field flags offset */
        54, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        55, /* = testRepeatedInt */
        71, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testRepeatedInt */
        // Property indices:
        0, /* = testRepeatedInt */
        // Field flags:
        uint(QtProtobufPrivate::FieldFlag::NonPacked | QtProtobufPrivate::FieldFlag::Repeated), /* = testRepeatedInt */
    },
    // char_data
    /* metadata char_data: */
    "qtprotobufnamespace.tests.RepeatedNonPackedUIntMessage\0" /* = full message name */
    /* field char_data: */
    "testRepeatedInt\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering RepeatedNonPackedUIntMessage::staticPropertyOrdering = {
    &qt_protobuf_RepeatedNonPackedUIntMessage_metadata.data
};

void RepeatedNonPackedUIntMessage::registerTypes()
{
    qRegisterMetaType<RepeatedNonPackedUIntMessage>();
    qRegisterMetaType<RepeatedNonPackedUIntMessageRepeated>();
}

RepeatedNonPackedUIntMessage::RepeatedNonPackedUIntMessage()
    : QProtobufMessage(&RepeatedNonPackedUIntMessage::staticMetaObject, &RepeatedNonPackedUIntMessage::staticPropertyOrdering),
      dptr(new RepeatedNonPackedUIntMessage_QtProtobufData)
{
}

RepeatedNonPackedUIntMessage::RepeatedNonPackedUIntMessage(const RepeatedNonPackedUIntMessage &other)
    = default;
RepeatedNonPackedUIntMessage &RepeatedNonPackedUIntMessage::operator =(const RepeatedNonPackedUIntMessage &other)
{
    RepeatedNonPackedUIntMessage temp(other);
    swap(temp);
    return *this;
}
RepeatedNonPackedUIntMessage::RepeatedNonPackedUIntMessage(RepeatedNonPackedUIntMessage &&other) noexcept
    = default;
bool comparesEqual(const RepeatedNonPackedUIntMessage &lhs, const RepeatedNonPackedUIntMessage &rhs) noexcept
{
    return operator ==(static_cast<const QProtobufMessage&>(lhs),
                       static_cast<const QProtobufMessage&>(rhs))
        && lhs.dptr->m_testRepeatedInt == rhs.dptr->m_testRepeatedInt;
}

const QtProtobuf::uint32List &RepeatedNonPackedUIntMessage::testRepeatedInt() const &
{
    return dptr->m_testRepeatedInt;
}

void RepeatedNonPackedUIntMessage::setTestRepeatedInt(const QtProtobuf::uint32List &testRepeatedInt)
{
    if (dptr->m_testRepeatedInt != testRepeatedInt) {
        dptr.detach();
        dptr->m_testRepeatedInt = testRepeatedInt;
    }
}

void RepeatedNonPackedUIntMessage::setTestRepeatedInt(QtProtobuf::uint32List &&testRepeatedInt)
{
    if (dptr->m_testRepeatedInt != testRepeatedInt) {
        dptr.detach();
        dptr->m_testRepeatedInt = std::move(testRepeatedInt);
    }
}


class RepeatedNonPackedInt64Message_QtProtobufData : public QSharedData
{
public:
    RepeatedNonPackedInt64Message_QtProtobufData()
        : QSharedData()
    {
    }

    RepeatedNonPackedInt64Message_QtProtobufData(const RepeatedNonPackedInt64Message_QtProtobufData &other)
        : QSharedData(other),
          m_testRepeatedInt(other.m_testRepeatedInt)
    {
    }

    QtProtobuf::int64List m_testRepeatedInt;
};

RepeatedNonPackedInt64Message::~RepeatedNonPackedInt64Message() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 5> qt_protobuf_RepeatedNonPackedInt64Message_uint_data;
    const char qt_protobuf_RepeatedNonPackedInt64Message_char_data[73];
} qt_protobuf_RepeatedNonPackedInt64Message_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
        4, /* = field flags offset */
        55, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        56, /* = testRepeatedInt */
        72, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testRepeatedInt */
        // Property indices:
        0, /* = testRepeatedInt */
        // Field flags:
        uint(QtProtobufPrivate::FieldFlag::NonPacked | QtProtobufPrivate::FieldFlag::Repeated), /* = testRepeatedInt */
    },
    // char_data
    /* metadata char_data: */
    "qtprotobufnamespace.tests.RepeatedNonPackedInt64Message\0" /* = full message name */
    /* field char_data: */
    "testRepeatedInt\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering RepeatedNonPackedInt64Message::staticPropertyOrdering = {
    &qt_protobuf_RepeatedNonPackedInt64Message_metadata.data
};

void RepeatedNonPackedInt64Message::registerTypes()
{
    qRegisterMetaType<RepeatedNonPackedInt64Message>();
    qRegisterMetaType<RepeatedNonPackedInt64MessageRepeated>();
}

RepeatedNonPackedInt64Message::RepeatedNonPackedInt64Message()
    : QProtobufMessage(&RepeatedNonPackedInt64Message::staticMetaObject, &RepeatedNonPackedInt64Message::staticPropertyOrdering),
      dptr(new RepeatedNonPackedInt64Message_QtProtobufData)
{
}

RepeatedNonPackedInt64Message::RepeatedNonPackedInt64Message(const RepeatedNonPackedInt64Message &other)
    = default;
RepeatedNonPackedInt64Message &RepeatedNonPackedInt64Message::operator =(const RepeatedNonPackedInt64Message &other)
{
    RepeatedNonPackedInt64Message temp(other);
    swap(temp);
    return *this;
}
RepeatedNonPackedInt64Message::RepeatedNonPackedInt64Message(RepeatedNonPackedInt64Message &&other) noexcept
    = default;
bool comparesEqual(const RepeatedNonPackedInt64Message &lhs, const RepeatedNonPackedInt64Message &rhs) noexcept
{
    return operator ==(static_cast<const QProtobufMessage&>(lhs),
                       static_cast<const QProtobufMessage&>(rhs))
        && lhs.dptr->m_testRepeatedInt == rhs.dptr->m_testRepeatedInt;
}

const QtProtobuf::int64List &RepeatedNonPackedInt64Message::testRepeatedInt() const &
{
    return dptr->m_testRepeatedInt;
}

void RepeatedNonPackedInt64Message::setTestRepeatedInt(const QtProtobuf::int64List &testRepeatedInt)
{
    if (dptr->m_testRepeatedInt != testRepeatedInt) {
        dptr.detach();
        dptr->m_testRepeatedInt = testRepeatedInt;
    }
}

void RepeatedNonPackedInt64Message::setTestRepeatedInt(QtProtobuf::int64List &&testRepeatedInt)
{
    if (dptr->m_testRepeatedInt != testRepeatedInt) {
        dptr.detach();
        dptr->m_testRepeatedInt = std::move(testRepeatedInt);
    }
}


class RepeatedNonPackedSInt64Message_QtProtobufData : public QSharedData
{
public:
    RepeatedNonPackedSInt64Message_QtProtobufData()
        : QSharedData()
    {
    }

    RepeatedNonPackedSInt64Message_QtProtobufData(const RepeatedNonPackedSInt64Message_QtProtobufData &other)
        : QSharedData(other),
          m_testRepeatedInt(other.m_testRepeatedInt)
    {
    }

    QtProtobuf::sint64List m_testRepeatedInt;
};

RepeatedNonPackedSInt64Message::~RepeatedNonPackedSInt64Message() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 5> qt_protobuf_RepeatedNonPackedSInt64Message_uint_data;
    const char qt_protobuf_RepeatedNonPackedSInt64Message_char_data[74];
} qt_protobuf_RepeatedNonPackedSInt64Message_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
        4, /* = field flags offset */
        56, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        57, /* = testRepeatedInt */
        73, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testRepeatedInt */
        // Property indices:
        0, /* = testRepeatedInt */
        // Field flags:
        uint(QtProtobufPrivate::FieldFlag::NonPacked | QtProtobufPrivate::FieldFlag::Repeated), /* = testRepeatedInt */
    },
    // char_data
    /* metadata char_data: */
    "qtprotobufnamespace.tests.RepeatedNonPackedSInt64Message\0" /* = full message name */
    /* field char_data: */
    "testRepeatedInt\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering RepeatedNonPackedSInt64Message::staticPropertyOrdering = {
    &qt_protobuf_RepeatedNonPackedSInt64Message_metadata.data
};

void RepeatedNonPackedSInt64Message::registerTypes()
{
    qRegisterMetaType<RepeatedNonPackedSInt64Message>();
    qRegisterMetaType<RepeatedNonPackedSInt64MessageRepeated>();
}

RepeatedNonPackedSInt64Message::RepeatedNonPackedSInt64Message()
    : QProtobufMessage(&RepeatedNonPackedSInt64Message::staticMetaObject, &RepeatedNonPackedSInt64Message::staticPropertyOrdering),
      dptr(new RepeatedNonPackedSInt64Message_QtProtobufData)
{
}

RepeatedNonPackedSInt64Message::RepeatedNonPackedSInt64Message(const RepeatedNonPackedSInt64Message &other)
    = default;
RepeatedNonPackedSInt64Message &RepeatedNonPackedSInt64Message::operator =(const RepeatedNonPackedSInt64Message &other)
{
    RepeatedNonPackedSInt64Message temp(other);
    swap(temp);
    return *this;
}
RepeatedNonPackedSInt64Message::RepeatedNonPackedSInt64Message(RepeatedNonPackedSInt64Message &&other) noexcept
    = default;
bool comparesEqual(const RepeatedNonPackedSInt64Message &lhs, const RepeatedNonPackedSInt64Message &rhs) noexcept
{
    return operator ==(static_cast<const QProtobufMessage&>(lhs),
                       static_cast<const QProtobufMessage&>(rhs))
        && lhs.dptr->m_testRepeatedInt == rhs.dptr->m_testRepeatedInt;
}

const QtProtobuf::sint64List &RepeatedNonPackedSInt64Message::testRepeatedInt() const &
{
    return dptr->m_testRepeatedInt;
}

void RepeatedNonPackedSInt64Message::setTestRepeatedInt(const QtProtobuf::sint64List &testRepeatedInt)
{
    if (dptr->m_testRepeatedInt != testRepeatedInt) {
        dptr.detach();
        dptr->m_testRepeatedInt = testRepeatedInt;
    }
}

void RepeatedNonPackedSInt64Message::setTestRepeatedInt(QtProtobuf::sint64List &&testRepeatedInt)
{
    if (dptr->m_testRepeatedInt != testRepeatedInt) {
        dptr.detach();
        dptr->m_testRepeatedInt = std::move(testRepeatedInt);
    }
}


class RepeatedNonPackedUInt64Message_QtProtobufData : public QSharedData
{
public:
    RepeatedNonPackedUInt64Message_QtProtobufData()
        : QSharedData()
    {
    }

    RepeatedNonPackedUInt64Message_QtProtobufData(const RepeatedNonPackedUInt64Message_QtProtobufData &other)
        : QSharedData(other),
          m_testRepeatedInt(other.m_testRepeatedInt)
    {
    }

    QtProtobuf::uint64List m_testRepeatedInt;
};

RepeatedNonPackedUInt64Message::~RepeatedNonPackedUInt64Message() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 5> qt_protobuf_RepeatedNonPackedUInt64Message_uint_data;
    const char qt_protobuf_RepeatedNonPackedUInt64Message_char_data[74];
} qt_protobuf_RepeatedNonPackedUInt64Message_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
        4, /* = field flags offset */
        56, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        57, /* = testRepeatedInt */
        73, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testRepeatedInt */
        // Property indices:
        0, /* = testRepeatedInt */
        // Field flags:
        uint(QtProtobufPrivate::FieldFlag::NonPacked | QtProtobufPrivate::FieldFlag::Repeated), /* = testRepeatedInt */
    },
    // char_data
    /* metadata char_data: */
    "qtprotobufnamespace.tests.RepeatedNonPackedUInt64Message\0" /* = full message name */
    /* field char_data: */
    "testRepeatedInt\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering RepeatedNonPackedUInt64Message::staticPropertyOrdering = {
    &qt_protobuf_RepeatedNonPackedUInt64Message_metadata.data
};

void RepeatedNonPackedUInt64Message::registerTypes()
{
    qRegisterMetaType<RepeatedNonPackedUInt64Message>();
    qRegisterMetaType<RepeatedNonPackedUInt64MessageRepeated>();
}

RepeatedNonPackedUInt64Message::RepeatedNonPackedUInt64Message()
    : QProtobufMessage(&RepeatedNonPackedUInt64Message::staticMetaObject, &RepeatedNonPackedUInt64Message::staticPropertyOrdering),
      dptr(new RepeatedNonPackedUInt64Message_QtProtobufData)
{
}

RepeatedNonPackedUInt64Message::RepeatedNonPackedUInt64Message(const RepeatedNonPackedUInt64Message &other)
    = default;
RepeatedNonPackedUInt64Message &RepeatedNonPackedUInt64Message::operator =(const RepeatedNonPackedUInt64Message &other)
{
    RepeatedNonPackedUInt64Message temp(other);
    swap(temp);
    return *this;
}
RepeatedNonPackedUInt64Message::RepeatedNonPackedUInt64Message(RepeatedNonPackedUInt64Message &&other) noexcept
    = default;
bool comparesEqual(const RepeatedNonPackedUInt64Message &lhs, const RepeatedNonPackedUInt64Message &rhs) noexcept
{
    return operator ==(static_cast<const QProtobufMessage&>(lhs),
                       static_cast<const QProtobufMessage&>(rhs))
        && lhs.dptr->m_testRepeatedInt == rhs.dptr->m_testRepeatedInt;
}

const QtProtobuf::uint64List &RepeatedNonPackedUInt64Message::testRepeatedInt() const &
{
    return dptr->m_testRepeatedInt;
}

void RepeatedNonPackedUInt64Message::setTestRepeatedInt(const QtProtobuf::uint64List &testRepeatedInt)
{
    if (dptr->m_testRepeatedInt != testRepeatedInt) {
        dptr.detach();
        dptr->m_testRepeatedInt = testRepeatedInt;
    }
}

void RepeatedNonPackedUInt64Message::setTestRepeatedInt(QtProtobuf::uint64List &&testRepeatedInt)
{
    if (dptr->m_testRepeatedInt != testRepeatedInt) {
        dptr.detach();
        dptr->m_testRepeatedInt = std::move(testRepeatedInt);
    }
}


class RepeatedNonPackedFixedIntMessage_QtProtobufData : public QSharedData
{
public:
    RepeatedNonPackedFixedIntMessage_QtProtobufData()
        : QSharedData()
    {
    }

    RepeatedNonPackedFixedIntMessage_QtProtobufData(const RepeatedNonPackedFixedIntMessage_QtProtobufData &other)
        : QSharedData(other),
          m_testRepeatedInt(other.m_testRepeatedInt)
    {
    }

    QtProtobuf::fixed32List m_testRepeatedInt;
};

RepeatedNonPackedFixedIntMessage::~RepeatedNonPackedFixedIntMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 5> qt_protobuf_RepeatedNonPackedFixedIntMessage_uint_data;
    const char qt_protobuf_RepeatedNonPackedFixedIntMessage_char_data[76];
} qt_protobuf_RepeatedNonPackedFixedIntMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
        4, /* = field flags offset */
        58, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        59, /* = testRepeatedInt */
        75, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testRepeatedInt */
        // Property indices:
        0, /* = testRepeatedInt */
        // Field flags:
        uint(QtProtobufPrivate::FieldFlag::NonPacked | QtProtobufPrivate::FieldFlag::Repeated), /* = testRepeatedInt */
    },
    // char_data
    /* metadata char_data: */
    "qtprotobufnamespace.tests.RepeatedNonPackedFixedIntMessage\0" /* = full message name */
    /* field char_data: */
    "testRepeatedInt\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering RepeatedNonPackedFixedIntMessage::staticPropertyOrdering = {
    &qt_protobuf_RepeatedNonPackedFixedIntMessage_metadata.data
};

void RepeatedNonPackedFixedIntMessage::registerTypes()
{
    qRegisterMetaType<RepeatedNonPackedFixedIntMessage>();
    qRegisterMetaType<RepeatedNonPackedFixedIntMessageRepeated>();
}

RepeatedNonPackedFixedIntMessage::RepeatedNonPackedFixedIntMessage()
    : QProtobufMessage(&RepeatedNonPackedFixedIntMessage::staticMetaObject, &RepeatedNonPackedFixedIntMessage::staticPropertyOrdering),
      dptr(new RepeatedNonPackedFixedIntMessage_QtProtobufData)
{
}

RepeatedNonPackedFixedIntMessage::RepeatedNonPackedFixedIntMessage(const RepeatedNonPackedFixedIntMessage &other)
    = default;
RepeatedNonPackedFixedIntMessage &RepeatedNonPackedFixedIntMessage::operator =(const RepeatedNonPackedFixedIntMessage &other)
{
    RepeatedNonPackedFixedIntMessage temp(other);
    swap(temp);
    return *this;
}
RepeatedNonPackedFixedIntMessage::RepeatedNonPackedFixedIntMessage(RepeatedNonPackedFixedIntMessage &&other) noexcept
    = default;
bool comparesEqual(const RepeatedNonPackedFixedIntMessage &lhs, const RepeatedNonPackedFixedIntMessage &rhs) noexcept
{
    return operator ==(static_cast<const QProtobufMessage&>(lhs),
                       static_cast<const QProtobufMessage&>(rhs))
        && lhs.dptr->m_testRepeatedInt == rhs.dptr->m_testRepeatedInt;
}

const QtProtobuf::fixed32List &RepeatedNonPackedFixedIntMessage::testRepeatedInt() const &
{
    return dptr->m_testRepeatedInt;
}

void RepeatedNonPackedFixedIntMessage::setTestRepeatedInt(const QtProtobuf::fixed32List &testRepeatedInt)
{
    if (dptr->m_testRepeatedInt != testRepeatedInt) {
        dptr.detach();
        dptr->m_testRepeatedInt = testRepeatedInt;
    }
}

void RepeatedNonPackedFixedIntMessage::setTestRepeatedInt(QtProtobuf::fixed32List &&testRepeatedInt)
{
    if (dptr->m_testRepeatedInt != testRepeatedInt) {
        dptr.detach();
        dptr->m_testRepeatedInt = std::move(testRepeatedInt);
    }
}


class RepeatedNonPackedSFixedIntMessage_QtProtobufData : public QSharedData
{
public:
    RepeatedNonPackedSFixedIntMessage_QtProtobufData()
        : QSharedData()
    {
    }

    RepeatedNonPackedSFixedIntMessage_QtProtobufData(const RepeatedNonPackedSFixedIntMessage_QtProtobufData &other)
        : QSharedData(other),
          m_testRepeatedInt(other.m_testRepeatedInt)
    {
    }

    QtProtobuf::sfixed32List m_testRepeatedInt;
};

RepeatedNonPackedSFixedIntMessage::~RepeatedNonPackedSFixedIntMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 5> qt_protobuf_RepeatedNonPackedSFixedIntMessage_uint_data;
    const char qt_protobuf_RepeatedNonPackedSFixedIntMessage_char_data[77];
} qt_protobuf_RepeatedNonPackedSFixedIntMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
        4, /* = field flags offset */
        59, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        60, /* = testRepeatedInt */
        76, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testRepeatedInt */
        // Property indices:
        0, /* = testRepeatedInt */
        // Field flags:
        uint(QtProtobufPrivate::FieldFlag::NonPacked | QtProtobufPrivate::FieldFlag::Repeated), /* = testRepeatedInt */
    },
    // char_data
    /* metadata char_data: */
    "qtprotobufnamespace.tests.RepeatedNonPackedSFixedIntMessage\0" /* = full message name */
    /* field char_data: */
    "testRepeatedInt\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering RepeatedNonPackedSFixedIntMessage::staticPropertyOrdering = {
    &qt_protobuf_RepeatedNonPackedSFixedIntMessage_metadata.data
};

void RepeatedNonPackedSFixedIntMessage::registerTypes()
{
    qRegisterMetaType<RepeatedNonPackedSFixedIntMessage>();
    qRegisterMetaType<RepeatedNonPackedSFixedIntMessageRepeated>();
}

RepeatedNonPackedSFixedIntMessage::RepeatedNonPackedSFixedIntMessage()
    : QProtobufMessage(&RepeatedNonPackedSFixedIntMessage::staticMetaObject, &RepeatedNonPackedSFixedIntMessage::staticPropertyOrdering),
      dptr(new RepeatedNonPackedSFixedIntMessage_QtProtobufData)
{
}

RepeatedNonPackedSFixedIntMessage::RepeatedNonPackedSFixedIntMessage(const RepeatedNonPackedSFixedIntMessage &other)
    = default;
RepeatedNonPackedSFixedIntMessage &RepeatedNonPackedSFixedIntMessage::operator =(const RepeatedNonPackedSFixedIntMessage &other)
{
    RepeatedNonPackedSFixedIntMessage temp(other);
    swap(temp);
    return *this;
}
RepeatedNonPackedSFixedIntMessage::RepeatedNonPackedSFixedIntMessage(RepeatedNonPackedSFixedIntMessage &&other) noexcept
    = default;
bool comparesEqual(const RepeatedNonPackedSFixedIntMessage &lhs, const RepeatedNonPackedSFixedIntMessage &rhs) noexcept
{
    return operator ==(static_cast<const QProtobufMessage&>(lhs),
                       static_cast<const QProtobufMessage&>(rhs))
        && lhs.dptr->m_testRepeatedInt == rhs.dptr->m_testRepeatedInt;
}

const QtProtobuf::sfixed32List &RepeatedNonPackedSFixedIntMessage::testRepeatedInt() const &
{
    return dptr->m_testRepeatedInt;
}

void RepeatedNonPackedSFixedIntMessage::setTestRepeatedInt(const QtProtobuf::sfixed32List &testRepeatedInt)
{
    if (dptr->m_testRepeatedInt != testRepeatedInt) {
        dptr.detach();
        dptr->m_testRepeatedInt = testRepeatedInt;
    }
}

void RepeatedNonPackedSFixedIntMessage::setTestRepeatedInt(QtProtobuf::sfixed32List &&testRepeatedInt)
{
    if (dptr->m_testRepeatedInt != testRepeatedInt) {
        dptr.detach();
        dptr->m_testRepeatedInt = std::move(testRepeatedInt);
    }
}


class RepeatedNonPackedFixedInt64Message_QtProtobufData : public QSharedData
{
public:
    RepeatedNonPackedFixedInt64Message_QtProtobufData()
        : QSharedData()
    {
    }

    RepeatedNonPackedFixedInt64Message_QtProtobufData(const RepeatedNonPackedFixedInt64Message_QtProtobufData &other)
        : QSharedData(other),
          m_testRepeatedInt(other.m_testRepeatedInt)
    {
    }

    QtProtobuf::fixed64List m_testRepeatedInt;
};

RepeatedNonPackedFixedInt64Message::~RepeatedNonPackedFixedInt64Message() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 5> qt_protobuf_RepeatedNonPackedFixedInt64Message_uint_data;
    const char qt_protobuf_RepeatedNonPackedFixedInt64Message_char_data[78];
} qt_protobuf_RepeatedNonPackedFixedInt64Message_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
        4, /* = field flags offset */
        60, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        61, /* = testRepeatedInt */
        77, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testRepeatedInt */
        // Property indices:
        0, /* = testRepeatedInt */
        // Field flags:
        uint(QtProtobufPrivate::FieldFlag::NonPacked | QtProtobufPrivate::FieldFlag::Repeated), /* = testRepeatedInt */
    },
    // char_data
    /* metadata char_data: */
    "qtprotobufnamespace.tests.RepeatedNonPackedFixedInt64Message\0" /* = full message name */
    /* field char_data: */
    "testRepeatedInt\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering RepeatedNonPackedFixedInt64Message::staticPropertyOrdering = {
    &qt_protobuf_RepeatedNonPackedFixedInt64Message_metadata.data
};

void RepeatedNonPackedFixedInt64Message::registerTypes()
{
    qRegisterMetaType<RepeatedNonPackedFixedInt64Message>();
    qRegisterMetaType<RepeatedNonPackedFixedInt64MessageRepeated>();
}

RepeatedNonPackedFixedInt64Message::RepeatedNonPackedFixedInt64Message()
    : QProtobufMessage(&RepeatedNonPackedFixedInt64Message::staticMetaObject, &RepeatedNonPackedFixedInt64Message::staticPropertyOrdering),
      dptr(new RepeatedNonPackedFixedInt64Message_QtProtobufData)
{
}

RepeatedNonPackedFixedInt64Message::RepeatedNonPackedFixedInt64Message(const RepeatedNonPackedFixedInt64Message &other)
    = default;
RepeatedNonPackedFixedInt64Message &RepeatedNonPackedFixedInt64Message::operator =(const RepeatedNonPackedFixedInt64Message &other)
{
    RepeatedNonPackedFixedInt64Message temp(other);
    swap(temp);
    return *this;
}
RepeatedNonPackedFixedInt64Message::RepeatedNonPackedFixedInt64Message(RepeatedNonPackedFixedInt64Message &&other) noexcept
    = default;
bool comparesEqual(const RepeatedNonPackedFixedInt64Message &lhs, const RepeatedNonPackedFixedInt64Message &rhs) noexcept
{
    return operator ==(static_cast<const QProtobufMessage&>(lhs),
                       static_cast<const QProtobufMessage&>(rhs))
        && lhs.dptr->m_testRepeatedInt == rhs.dptr->m_testRepeatedInt;
}

const QtProtobuf::fixed64List &RepeatedNonPackedFixedInt64Message::testRepeatedInt() const &
{
    return dptr->m_testRepeatedInt;
}

void RepeatedNonPackedFixedInt64Message::setTestRepeatedInt(const QtProtobuf::fixed64List &testRepeatedInt)
{
    if (dptr->m_testRepeatedInt != testRepeatedInt) {
        dptr.detach();
        dptr->m_testRepeatedInt = testRepeatedInt;
    }
}

void RepeatedNonPackedFixedInt64Message::setTestRepeatedInt(QtProtobuf::fixed64List &&testRepeatedInt)
{
    if (dptr->m_testRepeatedInt != testRepeatedInt) {
        dptr.detach();
        dptr->m_testRepeatedInt = std::move(testRepeatedInt);
    }
}


class RepeatedNonPackedSFixedInt64Message_QtProtobufData : public QSharedData
{
public:
    RepeatedNonPackedSFixedInt64Message_QtProtobufData()
        : QSharedData()
    {
    }

    RepeatedNonPackedSFixedInt64Message_QtProtobufData(const RepeatedNonPackedSFixedInt64Message_QtProtobufData &other)
        : QSharedData(other),
          m_testRepeatedInt(other.m_testRepeatedInt)
    {
    }

    QtProtobuf::sfixed64List m_testRepeatedInt;
};

RepeatedNonPackedSFixedInt64Message::~RepeatedNonPackedSFixedInt64Message() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 5> qt_protobuf_RepeatedNonPackedSFixedInt64Message_uint_data;
    const char qt_protobuf_RepeatedNonPackedSFixedInt64Message_char_data[79];
} qt_protobuf_RepeatedNonPackedSFixedInt64Message_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
        4, /* = field flags offset */
        61, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        62, /* = testRepeatedInt */
        78, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testRepeatedInt */
        // Property indices:
        0, /* = testRepeatedInt */
        // Field flags:
        uint(QtProtobufPrivate::FieldFlag::NonPacked | QtProtobufPrivate::FieldFlag::Repeated), /* = testRepeatedInt */
    },
    // char_data
    /* metadata char_data: */
    "qtprotobufnamespace.tests.RepeatedNonPackedSFixedInt64Message\0" /* = full message name */
    /* field char_data: */
    "testRepeatedInt\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering RepeatedNonPackedSFixedInt64Message::staticPropertyOrdering = {
    &qt_protobuf_RepeatedNonPackedSFixedInt64Message_metadata.data
};

void RepeatedNonPackedSFixedInt64Message::registerTypes()
{
    qRegisterMetaType<RepeatedNonPackedSFixedInt64Message>();
    qRegisterMetaType<RepeatedNonPackedSFixedInt64MessageRepeated>();
}

RepeatedNonPackedSFixedInt64Message::RepeatedNonPackedSFixedInt64Message()
    : QProtobufMessage(&RepeatedNonPackedSFixedInt64Message::staticMetaObject, &RepeatedNonPackedSFixedInt64Message::staticPropertyOrdering),
      dptr(new RepeatedNonPackedSFixedInt64Message_QtProtobufData)
{
}

RepeatedNonPackedSFixedInt64Message::RepeatedNonPackedSFixedInt64Message(const RepeatedNonPackedSFixedInt64Message &other)
    = default;
RepeatedNonPackedSFixedInt64Message &RepeatedNonPackedSFixedInt64Message::operator =(const RepeatedNonPackedSFixedInt64Message &other)
{
    RepeatedNonPackedSFixedInt64Message temp(other);
    swap(temp);
    return *this;
}
RepeatedNonPackedSFixedInt64Message::RepeatedNonPackedSFixedInt64Message(RepeatedNonPackedSFixedInt64Message &&other) noexcept
    = default;
bool comparesEqual(const RepeatedNonPackedSFixedInt64Message &lhs, const RepeatedNonPackedSFixedInt64Message &rhs) noexcept
{
    return operator ==(static_cast<const QProtobufMessage&>(lhs),
                       static_cast<const QProtobufMessage&>(rhs))
        && lhs.dptr->m_testRepeatedInt == rhs.dptr->m_testRepeatedInt;
}

const QtProtobuf::sfixed64List &RepeatedNonPackedSFixedInt64Message::testRepeatedInt() const &
{
    return dptr->m_testRepeatedInt;
}

void RepeatedNonPackedSFixedInt64Message::setTestRepeatedInt(const QtProtobuf::sfixed64List &testRepeatedInt)
{
    if (dptr->m_testRepeatedInt != testRepeatedInt) {
        dptr.detach();
        dptr->m_testRepeatedInt = testRepeatedInt;
    }
}

void RepeatedNonPackedSFixedInt64Message::setTestRepeatedInt(QtProtobuf::sfixed64List &&testRepeatedInt)
{
    if (dptr->m_testRepeatedInt != testRepeatedInt) {
        dptr.detach();
        dptr->m_testRepeatedInt = std::move(testRepeatedInt);
    }
}


class RepeatedNonPackedBoolMessage_QtProtobufData : public QSharedData
{
public:
    RepeatedNonPackedBoolMessage_QtProtobufData()
        : QSharedData()
    {
    }

    RepeatedNonPackedBoolMessage_QtProtobufData(const RepeatedNonPackedBoolMessage_QtProtobufData &other)
        : QSharedData(other),
          m_testRepeatedBool(other.m_testRepeatedBool)
    {
    }

    QtProtobuf::boolList m_testRepeatedBool;
};

RepeatedNonPackedBoolMessage::~RepeatedNonPackedBoolMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 5> qt_protobuf_RepeatedNonPackedBoolMessage_uint_data;
    const char qt_protobuf_RepeatedNonPackedBoolMessage_char_data[73];
} qt_protobuf_RepeatedNonPackedBoolMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
        4, /* = field flags offset */
        54, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        55, /* = testRepeatedBool */
        72, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testRepeatedBool */
        // Property indices:
        0, /* = testRepeatedBool */
        // Field flags:
        uint(QtProtobufPrivate::FieldFlag::NonPacked | QtProtobufPrivate::FieldFlag::Repeated), /* = testRepeatedBool */
    },
    // char_data
    /* metadata char_data: */
    "qtprotobufnamespace.tests.RepeatedNonPackedBoolMessage\0" /* = full message name */
    /* field char_data: */
    "testRepeatedBool\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering RepeatedNonPackedBoolMessage::staticPropertyOrdering = {
    &qt_protobuf_RepeatedNonPackedBoolMessage_metadata.data
};

void RepeatedNonPackedBoolMessage::registerTypes()
{
    qRegisterMetaType<RepeatedNonPackedBoolMessage>();
    qRegisterMetaType<RepeatedNonPackedBoolMessageRepeated>();
}

RepeatedNonPackedBoolMessage::RepeatedNonPackedBoolMessage()
    : QProtobufMessage(&RepeatedNonPackedBoolMessage::staticMetaObject, &RepeatedNonPackedBoolMessage::staticPropertyOrdering),
      dptr(new RepeatedNonPackedBoolMessage_QtProtobufData)
{
}

RepeatedNonPackedBoolMessage::RepeatedNonPackedBoolMessage(const RepeatedNonPackedBoolMessage &other)
    = default;
RepeatedNonPackedBoolMessage &RepeatedNonPackedBoolMessage::operator =(const RepeatedNonPackedBoolMessage &other)
{
    RepeatedNonPackedBoolMessage temp(other);
    swap(temp);
    return *this;
}
RepeatedNonPackedBoolMessage::RepeatedNonPackedBoolMessage(RepeatedNonPackedBoolMessage &&other) noexcept
    = default;
bool comparesEqual(const RepeatedNonPackedBoolMessage &lhs, const RepeatedNonPackedBoolMessage &rhs) noexcept
{
    return operator ==(static_cast<const QProtobufMessage&>(lhs),
                       static_cast<const QProtobufMessage&>(rhs))
        && lhs.dptr->m_testRepeatedBool == rhs.dptr->m_testRepeatedBool;
}

const QtProtobuf::boolList &RepeatedNonPackedBoolMessage::testRepeatedBool() const &
{
    return dptr->m_testRepeatedBool;
}

void RepeatedNonPackedBoolMessage::setTestRepeatedBool(const QtProtobuf::boolList &testRepeatedBool)
{
    if (dptr->m_testRepeatedBool != testRepeatedBool) {
        dptr.detach();
        dptr->m_testRepeatedBool = testRepeatedBool;
    }
}

void RepeatedNonPackedBoolMessage::setTestRepeatedBool(QtProtobuf::boolList &&testRepeatedBool)
{
    if (dptr->m_testRepeatedBool != testRepeatedBool) {
        dptr.detach();
        dptr->m_testRepeatedBool = std::move(testRepeatedBool);
    }
}


class RepeatedNonPackedDoubleMessage_QtProtobufData : public QSharedData
{
public:
    RepeatedNonPackedDoubleMessage_QtProtobufData()
        : QSharedData()
    {
    }

    RepeatedNonPackedDoubleMessage_QtProtobufData(const RepeatedNonPackedDoubleMessage_QtProtobufData &other)
        : QSharedData(other),
          m_testRepeatedDouble(other.m_testRepeatedDouble)
    {
    }

    QtProtobuf::doubleList m_testRepeatedDouble;
};

RepeatedNonPackedDoubleMessage::~RepeatedNonPackedDoubleMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 5> qt_protobuf_RepeatedNonPackedDoubleMessage_uint_data;
    const char qt_protobuf_RepeatedNonPackedDoubleMessage_char_data[77];
} qt_protobuf_RepeatedNonPackedDoubleMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
        4, /* = field flags offset */
        56, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        57, /* = testRepeatedDouble */
        76, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testRepeatedDouble */
        // Property indices:
        0, /* = testRepeatedDouble */
        // Field flags:
        uint(QtProtobufPrivate::FieldFlag::NonPacked | QtProtobufPrivate::FieldFlag::Repeated), /* = testRepeatedDouble */
    },
    // char_data
    /* metadata char_data: */
    "qtprotobufnamespace.tests.RepeatedNonPackedDoubleMessage\0" /* = full message name */
    /* field char_data: */
    "testRepeatedDouble\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering RepeatedNonPackedDoubleMessage::staticPropertyOrdering = {
    &qt_protobuf_RepeatedNonPackedDoubleMessage_metadata.data
};

void RepeatedNonPackedDoubleMessage::registerTypes()
{
    qRegisterMetaType<RepeatedNonPackedDoubleMessage>();
    qRegisterMetaType<RepeatedNonPackedDoubleMessageRepeated>();
}

RepeatedNonPackedDoubleMessage::RepeatedNonPackedDoubleMessage()
    : QProtobufMessage(&RepeatedNonPackedDoubleMessage::staticMetaObject, &RepeatedNonPackedDoubleMessage::staticPropertyOrdering),
      dptr(new RepeatedNonPackedDoubleMessage_QtProtobufData)
{
}

RepeatedNonPackedDoubleMessage::RepeatedNonPackedDoubleMessage(const RepeatedNonPackedDoubleMessage &other)
    = default;
RepeatedNonPackedDoubleMessage &RepeatedNonPackedDoubleMessage::operator =(const RepeatedNonPackedDoubleMessage &other)
{
    RepeatedNonPackedDoubleMessage temp(other);
    swap(temp);
    return *this;
}
RepeatedNonPackedDoubleMessage::RepeatedNonPackedDoubleMessage(RepeatedNonPackedDoubleMessage &&other) noexcept
    = default;
bool comparesEqual(const RepeatedNonPackedDoubleMessage &lhs, const RepeatedNonPackedDoubleMessage &rhs) noexcept
{
    return operator ==(static_cast<const QProtobufMessage&>(lhs),
                       static_cast<const QProtobufMessage&>(rhs))
        && lhs.dptr->m_testRepeatedDouble == rhs.dptr->m_testRepeatedDouble;
}

const QtProtobuf::doubleList &RepeatedNonPackedDoubleMessage::testRepeatedDouble() const &
{
    return dptr->m_testRepeatedDouble;
}

void RepeatedNonPackedDoubleMessage::setTestRepeatedDouble(const QtProtobuf::doubleList &testRepeatedDouble)
{
    if (dptr->m_testRepeatedDouble != testRepeatedDouble) {
        dptr.detach();
        dptr->m_testRepeatedDouble = testRepeatedDouble;
    }
}

void RepeatedNonPackedDoubleMessage::setTestRepeatedDouble(QtProtobuf::doubleList &&testRepeatedDouble)
{
    if (dptr->m_testRepeatedDouble != testRepeatedDouble) {
        dptr.detach();
        dptr->m_testRepeatedDouble = std::move(testRepeatedDouble);
    }
}


class RepeatedNonPackedFloatMessage_QtProtobufData : public QSharedData
{
public:
    RepeatedNonPackedFloatMessage_QtProtobufData()
        : QSharedData()
    {
    }

    RepeatedNonPackedFloatMessage_QtProtobufData(const RepeatedNonPackedFloatMessage_QtProtobufData &other)
        : QSharedData(other),
          m_testRepeatedFloat(other.m_testRepeatedFloat)
    {
    }

    QtProtobuf::floatList m_testRepeatedFloat;
};

RepeatedNonPackedFloatMessage::~RepeatedNonPackedFloatMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 5> qt_protobuf_RepeatedNonPackedFloatMessage_uint_data;
    const char qt_protobuf_RepeatedNonPackedFloatMessage_char_data[75];
} qt_protobuf_RepeatedNonPackedFloatMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
        4, /* = field flags offset */
        55, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        56, /* = testRepeatedFloat */
        74, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testRepeatedFloat */
        // Property indices:
        0, /* = testRepeatedFloat */
        // Field flags:
        uint(QtProtobufPrivate::FieldFlag::NonPacked | QtProtobufPrivate::FieldFlag::Repeated), /* = testRepeatedFloat */
    },
    // char_data
    /* metadata char_data: */
    "qtprotobufnamespace.tests.RepeatedNonPackedFloatMessage\0" /* = full message name */
    /* field char_data: */
    "testRepeatedFloat\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering RepeatedNonPackedFloatMessage::staticPropertyOrdering = {
    &qt_protobuf_RepeatedNonPackedFloatMessage_metadata.data
};

void RepeatedNonPackedFloatMessage::registerTypes()
{
    qRegisterMetaType<RepeatedNonPackedFloatMessage>();
    qRegisterMetaType<RepeatedNonPackedFloatMessageRepeated>();
}

RepeatedNonPackedFloatMessage::RepeatedNonPackedFloatMessage()
    : QProtobufMessage(&RepeatedNonPackedFloatMessage::staticMetaObject, &RepeatedNonPackedFloatMessage::staticPropertyOrdering),
      dptr(new RepeatedNonPackedFloatMessage_QtProtobufData)
{
}

RepeatedNonPackedFloatMessage::RepeatedNonPackedFloatMessage(const RepeatedNonPackedFloatMessage &other)
    = default;
RepeatedNonPackedFloatMessage &RepeatedNonPackedFloatMessage::operator =(const RepeatedNonPackedFloatMessage &other)
{
    RepeatedNonPackedFloatMessage temp(other);
    swap(temp);
    return *this;
}
RepeatedNonPackedFloatMessage::RepeatedNonPackedFloatMessage(RepeatedNonPackedFloatMessage &&other) noexcept
    = default;
bool comparesEqual(const RepeatedNonPackedFloatMessage &lhs, const RepeatedNonPackedFloatMessage &rhs) noexcept
{
    return operator ==(static_cast<const QProtobufMessage&>(lhs),
                       static_cast<const QProtobufMessage&>(rhs))
        && lhs.dptr->m_testRepeatedFloat == rhs.dptr->m_testRepeatedFloat;
}

const QtProtobuf::floatList &RepeatedNonPackedFloatMessage::testRepeatedFloat() const &
{
    return dptr->m_testRepeatedFloat;
}

void RepeatedNonPackedFloatMessage::setTestRepeatedFloat(const QtProtobuf::floatList &testRepeatedFloat)
{
    if (dptr->m_testRepeatedFloat != testRepeatedFloat) {
        dptr.detach();
        dptr->m_testRepeatedFloat = testRepeatedFloat;
    }
}

void RepeatedNonPackedFloatMessage::setTestRepeatedFloat(QtProtobuf::floatList &&testRepeatedFloat)
{
    if (dptr->m_testRepeatedFloat != testRepeatedFloat) {
        dptr.detach();
        dptr->m_testRepeatedFloat = std::move(testRepeatedFloat);
    }
}


class NonPackedIntMessageWithExtraMember_QtProtobufData : public QSharedData
{
public:
    NonPackedIntMessageWithExtraMember_QtProtobufData()
        : QSharedData()
    {
    }

    NonPackedIntMessageWithExtraMember_QtProtobufData(const NonPackedIntMessageWithExtraMember_QtProtobufData &other)
        : QSharedData(other),
          m_testRepeatedInt(other.m_testRepeatedInt),
          m_extra(other.m_extra)
    {
    }

    QtProtobuf::int32List m_testRepeatedInt;
    QString m_extra;
};

NonPackedIntMessageWithExtraMember::~NonPackedIntMessageWithExtraMember() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 9> qt_protobuf_NonPackedIntMessageWithExtraMember_uint_data;
    const char qt_protobuf_NonPackedIntMessageWithExtraMember_char_data[84];
} qt_protobuf_NonPackedIntMessageWithExtraMember_metadata {
    // data
    {
        0, /* = version */
        2, /* = num fields */
        3, /* = field number offset */
        5, /* = property index offset */
        7, /* = field flags offset */
        60, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        61, /* = testRepeatedInt */
        77, /* = extra */
        83, /* = end-of-string-marker */
        // Field numbers:
        1, /* = testRepeatedInt */
        2, /* = extra */
        // Property indices:
        0, /* = testRepeatedInt */
        1, /* = extra */
        // Field flags:
        uint(QtProtobufPrivate::FieldFlag::NonPacked | QtProtobufPrivate::FieldFlag::Repeated), /* = testRepeatedInt */
        uint(QtProtobufPrivate::FieldFlag::NoFlags), /* = extra */
    },
    // char_data
    /* metadata char_data: */
    "qtprotobufnamespace.tests.NonPackedIntMessageWithExtraMember\0" /* = full message name */
    /* field char_data: */
    "testRepeatedInt\0extra\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering NonPackedIntMessageWithExtraMember::staticPropertyOrdering = {
    &qt_protobuf_NonPackedIntMessageWithExtraMember_metadata.data
};

void NonPackedIntMessageWithExtraMember::registerTypes()
{
    qRegisterMetaType<NonPackedIntMessageWithExtraMember>();
    qRegisterMetaType<NonPackedIntMessageWithExtraMemberRepeated>();
}

NonPackedIntMessageWithExtraMember::NonPackedIntMessageWithExtraMember()
    : QProtobufMessage(&NonPackedIntMessageWithExtraMember::staticMetaObject, &NonPackedIntMessageWithExtraMember::staticPropertyOrdering),
      dptr(new NonPackedIntMessageWithExtraMember_QtProtobufData)
{
}

NonPackedIntMessageWithExtraMember::NonPackedIntMessageWithExtraMember(const NonPackedIntMessageWithExtraMember &other)
    = default;
NonPackedIntMessageWithExtraMember &NonPackedIntMessageWithExtraMember::operator =(const NonPackedIntMessageWithExtraMember &other)
{
    NonPackedIntMessageWithExtraMember temp(other);
    swap(temp);
    return *this;
}
NonPackedIntMessageWithExtraMember::NonPackedIntMessageWithExtraMember(NonPackedIntMessageWithExtraMember &&other) noexcept
    = default;
bool comparesEqual(const NonPackedIntMessageWithExtraMember &lhs, const NonPackedIntMessageWithExtraMember &rhs) noexcept
{
    return operator ==(static_cast<const QProtobufMessage&>(lhs),
                       static_cast<const QProtobufMessage&>(rhs))
        && lhs.dptr->m_testRepeatedInt == rhs.dptr->m_testRepeatedInt
        && lhs.dptr->m_extra == rhs.dptr->m_extra;
}

const QtProtobuf::int32List &NonPackedIntMessageWithExtraMember::testRepeatedInt() const &
{
    return dptr->m_testRepeatedInt;
}

const QString &NonPackedIntMessageWithExtraMember::extra() const &
{
    return dptr->m_extra;
}

void NonPackedIntMessageWithExtraMember::setTestRepeatedInt(const QtProtobuf::int32List &testRepeatedInt)
{
    if (dptr->m_testRepeatedInt != testRepeatedInt) {
        dptr.detach();
        dptr->m_testRepeatedInt = testRepeatedInt;
    }
}

void NonPackedIntMessageWithExtraMember::setTestRepeatedInt(QtProtobuf::int32List &&testRepeatedInt)
{
    if (dptr->m_testRepeatedInt != testRepeatedInt) {
        dptr.detach();
        dptr->m_testRepeatedInt = std::move(testRepeatedInt);
    }
}

void NonPackedIntMessageWithExtraMember::setExtra(const QString &extra)
{
    if (dptr->m_extra != extra) {
        dptr.detach();
        dptr->m_extra = extra;
    }
}

void NonPackedIntMessageWithExtraMember::setExtra(QString &&extra)
{
    if (dptr->m_extra != extra) {
        dptr.detach();
        dptr->m_extra = std::move(extra);
    }
}

} // namespace qtprotobufnamespace::tests

#include "moc_repeatednonpackedmessages.qpb.cpp"
