/* This file is autogenerated. DO NOT CHANGE. All changes will be lost */

#include "enummessages.qpb.h"
#include <QtProtobuf/qprotobufserializer.h>
#include <QtQml/qqmlengine.h>

namespace qtprotobufnamespace::tests {
static QtProtobuf::ProtoTypeRegistrar ProtoTypeRegistrarTestEnumGadget(TestEnumGadget::registerTypes);
void TestEnumGadget::registerTypes()
{
    qRegisterMetaType<TestEnum>();
    qRegisterMetaType<qtprotobufnamespace::tests::TestEnumGadget::TestEnum>();
    qRegisterProtobufEnumType<qtprotobufnamespace::tests::TestEnumGadget::TestEnum>();
}

static QtProtobuf::ProtoTypeRegistrar ProtoTypeRegistrarTestEnumSecondInFileGadget(TestEnumSecondInFileGadget::registerTypes);
void TestEnumSecondInFileGadget::registerTypes()
{
    qRegisterMetaType<TestEnumSecondInFile>();
    qRegisterMetaType<qtprotobufnamespace::tests::TestEnumSecondInFileGadget::TestEnumSecondInFile>();
    qRegisterProtobufEnumType<qtprotobufnamespace::tests::TestEnumSecondInFileGadget::TestEnumSecondInFile>();
}


class SimpleEnumMessage_QtProtobufData : public QSharedData
{
public:
    SimpleEnumMessage_QtProtobufData()
        : QSharedData(),
          m_localEnum(SimpleEnumMessage::LocalEnum::LOCAL_ENUM_VALUE0)
    {
    }

    SimpleEnumMessage_QtProtobufData(const SimpleEnumMessage_QtProtobufData &other)
        : QSharedData(other),
          m_localEnum(other.m_localEnum)
    {
    }

    SimpleEnumMessage::LocalEnum m_localEnum;
};

SimpleEnumMessage::~SimpleEnumMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 5> qt_protobuf_SimpleEnumMessage_uint_data;
    const char qt_protobuf_SimpleEnumMessage_char_data[55];
} qt_protobuf_SimpleEnumMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
        4, /* = field flags offset */
        43, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        44, /* = localEnum */
        54, /* = end-of-string-marker */
        // Field numbers:
        1, /* = localEnum */
        // Property indices:
        0, /* = localEnum */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = localEnum */
    },
    // char_data
    /* metadata char_data: */
    "qtprotobufnamespace.tests.SimpleEnumMessage\0" /* = full message name */
    /* field char_data: */
    "localEnum\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleEnumMessage::propertyOrdering = {
    &qt_protobuf_SimpleEnumMessage_metadata.data
};

void SimpleEnumMessage::registerTypes()
{
    qRegisterMetaType<SimpleEnumMessage>();
    qRegisterMetaType<SimpleEnumMessageRepeated>();
    qRegisterProtobufEnumType<SimpleEnumMessage::LocalEnum>();
    qRegisterMetaType<SimpleEnumMessage::LocalEnum>();
    qRegisterMetaType<SimpleEnumMessage::LocalEnum>();
    qRegisterMetaType<SimpleEnumMessage::LocalEnumRepeated>();
}

SimpleEnumMessage::SimpleEnumMessage()
    : QProtobufMessage(&SimpleEnumMessage::staticMetaObject),
      dptr(new SimpleEnumMessage_QtProtobufData)
{
}

SimpleEnumMessage::SimpleEnumMessage(const SimpleEnumMessage &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
SimpleEnumMessage &SimpleEnumMessage::operator =(const SimpleEnumMessage &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
SimpleEnumMessage::SimpleEnumMessage(SimpleEnumMessage &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
SimpleEnumMessage &SimpleEnumMessage::operator =(SimpleEnumMessage &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool SimpleEnumMessage::operator ==(const SimpleEnumMessage &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_localEnum == other.dptr->m_localEnum;
}

bool SimpleEnumMessage::operator !=(const SimpleEnumMessage &other) const
{
    return !this->operator ==(other);
}

SimpleEnumMessage::LocalEnum SimpleEnumMessage::localEnum() const
{
    return dptr->m_localEnum;
}

void SimpleEnumMessage::setLocalEnum(const SimpleEnumMessage::LocalEnum &localEnum)
{
    if (dptr->m_localEnum != localEnum) {
        dptr.detach();
        dptr->m_localEnum = localEnum;
    }
}


class RepeatedEnumMessage_QtProtobufData : public QSharedData
{
public:
    RepeatedEnumMessage_QtProtobufData()
        : QSharedData()
    {
    }

    RepeatedEnumMessage_QtProtobufData(const RepeatedEnumMessage_QtProtobufData &other)
        : QSharedData(other),
          m_localEnumList(other.m_localEnumList)
    {
    }

    RepeatedEnumMessage::LocalEnumRepeated m_localEnumList;
};

RepeatedEnumMessage::~RepeatedEnumMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 5> qt_protobuf_RepeatedEnumMessage_uint_data;
    const char qt_protobuf_RepeatedEnumMessage_char_data[61];
} qt_protobuf_RepeatedEnumMessage_metadata {
    // data
    {
        0, /* = version */
        1, /* = num fields */
        2, /* = field number offset */
        3, /* = property index offset */
        4, /* = field flags offset */
        45, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        46, /* = localEnumList */
        60, /* = end-of-string-marker */
        // Field numbers:
        1, /* = localEnumList */
        // Property indices:
        0, /* = localEnumList */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = localEnumList */
    },
    // char_data
    /* metadata char_data: */
    "qtprotobufnamespace.tests.RepeatedEnumMessage\0" /* = full message name */
    /* field char_data: */
    "localEnumList\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering RepeatedEnumMessage::propertyOrdering = {
    &qt_protobuf_RepeatedEnumMessage_metadata.data
};

void RepeatedEnumMessage::registerTypes()
{
    qRegisterMetaType<RepeatedEnumMessage>();
    qRegisterMetaType<RepeatedEnumMessageRepeated>();
    qRegisterProtobufEnumType<RepeatedEnumMessage::LocalEnum>();
    qRegisterMetaType<RepeatedEnumMessage::LocalEnum>();
    qRegisterMetaType<RepeatedEnumMessage::LocalEnum>();
    qRegisterMetaType<RepeatedEnumMessage::LocalEnumRepeated>();
}

RepeatedEnumMessage::RepeatedEnumMessage()
    : QProtobufMessage(&RepeatedEnumMessage::staticMetaObject),
      dptr(new RepeatedEnumMessage_QtProtobufData)
{
}

RepeatedEnumMessage::RepeatedEnumMessage(const RepeatedEnumMessage &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
RepeatedEnumMessage &RepeatedEnumMessage::operator =(const RepeatedEnumMessage &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
RepeatedEnumMessage::RepeatedEnumMessage(RepeatedEnumMessage &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
RepeatedEnumMessage &RepeatedEnumMessage::operator =(RepeatedEnumMessage &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool RepeatedEnumMessage::operator ==(const RepeatedEnumMessage &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_localEnumList == other.dptr->m_localEnumList;
}

bool RepeatedEnumMessage::operator !=(const RepeatedEnumMessage &other) const
{
    return !this->operator ==(other);
}

RepeatedEnumMessage::LocalEnumRepeated RepeatedEnumMessage::localEnumList() const
{
    return dptr->m_localEnumList;
}

RepeatedEnumMessage::LocalEnumRepeated &RepeatedEnumMessage::localEnumList()
{
    dptr.detach();
    return dptr->m_localEnumList;
}

void RepeatedEnumMessage::setLocalEnumList(const RepeatedEnumMessage::LocalEnumRepeated &localEnumList)
{
    if (dptr->m_localEnumList != localEnumList) {
        dptr.detach();
        dptr->m_localEnumList = localEnumList;
    }
}


class MixedEnumUsageMessage_QtProtobufData : public QSharedData
{
public:
    MixedEnumUsageMessage_QtProtobufData()
        : QSharedData(),
          m_localEnum(MixedEnumUsageMessage::LocalEnum::LOCAL_ENUM_VALUE0)
    {
    }

    MixedEnumUsageMessage_QtProtobufData(const MixedEnumUsageMessage_QtProtobufData &other)
        : QSharedData(other),
          m_localEnum(other.m_localEnum),
          m_localEnumList(other.m_localEnumList),
          m_localEnumMap(other.m_localEnumMap)
    {
    }

    MixedEnumUsageMessage::LocalEnum m_localEnum;
    MixedEnumUsageMessage::LocalEnumRepeated m_localEnumList;
    MixedEnumUsageMessage::LocalEnumMapEntry m_localEnumMap;
};

MixedEnumUsageMessage::~MixedEnumUsageMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 13> qt_protobuf_MixedEnumUsageMessage_uint_data;
    const char qt_protobuf_MixedEnumUsageMessage_char_data[86];
} qt_protobuf_MixedEnumUsageMessage_metadata {
    // data
    {
        0, /* = version */
        3, /* = num fields */
        4, /* = field number offset */
        7, /* = property index offset */
        10, /* = field flags offset */
        47, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        48, /* = localEnum */
        58, /* = localEnumList */
        72, /* = localEnumMap */
        85, /* = end-of-string-marker */
        // Field numbers:
        1, /* = localEnum */
        2, /* = localEnumList */
        3, /* = localEnumMap */
        // Property indices:
        0, /* = localEnum */
        1, /* = localEnumList */
        2, /* = localEnumMap */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = localEnum */
        QtProtobufPrivate::NoFlags, /* = localEnumList */
        QtProtobufPrivate::NoFlags, /* = localEnumMap */
    },
    // char_data
    /* metadata char_data: */
    "qtprotobufnamespace.tests.MixedEnumUsageMessage\0" /* = full message name */
    /* field char_data: */
    "localEnum\0localEnumList\0localEnumMap\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering MixedEnumUsageMessage::propertyOrdering = {
    &qt_protobuf_MixedEnumUsageMessage_metadata.data
};

void MixedEnumUsageMessage::registerTypes()
{
    qRegisterMetaType<MixedEnumUsageMessage>();
    qRegisterMetaType<MixedEnumUsageMessageRepeated>();
    qRegisterProtobufEnumType<MixedEnumUsageMessage::LocalEnum>();
    qRegisterMetaType<MixedEnumUsageMessage::LocalEnum>();
    qRegisterMetaType<MixedEnumUsageMessage::LocalEnum>();
    qRegisterMetaType<MixedEnumUsageMessage::LocalEnumRepeated>();
    qRegisterMetaType<MixedEnumUsageMessage::LocalEnumMapEntry>();
    qRegisterProtobufMapType<QString, MixedEnumUsageMessage::LocalEnum>();
}

MixedEnumUsageMessage::MixedEnumUsageMessage()
    : QProtobufMessage(&MixedEnumUsageMessage::staticMetaObject),
      dptr(new MixedEnumUsageMessage_QtProtobufData)
{
}

MixedEnumUsageMessage::MixedEnumUsageMessage(const MixedEnumUsageMessage &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
MixedEnumUsageMessage &MixedEnumUsageMessage::operator =(const MixedEnumUsageMessage &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
MixedEnumUsageMessage::MixedEnumUsageMessage(MixedEnumUsageMessage &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
MixedEnumUsageMessage &MixedEnumUsageMessage::operator =(MixedEnumUsageMessage &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool MixedEnumUsageMessage::operator ==(const MixedEnumUsageMessage &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_localEnum == other.dptr->m_localEnum
        && dptr->m_localEnumList == other.dptr->m_localEnumList
        && QtProtobuf::repeatedValueCompare(dptr->m_localEnumMap, other.dptr->m_localEnumMap);
}

bool MixedEnumUsageMessage::operator !=(const MixedEnumUsageMessage &other) const
{
    return !this->operator ==(other);
}

MixedEnumUsageMessage::LocalEnum MixedEnumUsageMessage::localEnum() const
{
    return dptr->m_localEnum;
}

MixedEnumUsageMessage::LocalEnumRepeated MixedEnumUsageMessage::localEnumList() const
{
    return dptr->m_localEnumList;
}

MixedEnumUsageMessage::LocalEnumRepeated &MixedEnumUsageMessage::localEnumList()
{
    dptr.detach();
    return dptr->m_localEnumList;
}

MixedEnumUsageMessage::LocalEnumMapEntry MixedEnumUsageMessage::localEnumMap() const
{
    return dptr->m_localEnumMap;
}

MixedEnumUsageMessage::LocalEnumMapEntry &MixedEnumUsageMessage::localEnumMap()
{
    dptr.detach();
    return dptr->m_localEnumMap;
}

void MixedEnumUsageMessage::setLocalEnum(const MixedEnumUsageMessage::LocalEnum &localEnum)
{
    if (dptr->m_localEnum != localEnum) {
        dptr.detach();
        dptr->m_localEnum = localEnum;
    }
}

void MixedEnumUsageMessage::setLocalEnumList(const MixedEnumUsageMessage::LocalEnumRepeated &localEnumList)
{
    if (dptr->m_localEnumList != localEnumList) {
        dptr.detach();
        dptr->m_localEnumList = localEnumList;
    }
}

void MixedEnumUsageMessage::setLocalEnumMap(const MixedEnumUsageMessage::LocalEnumMapEntry &localEnumMap)
{
    if (dptr->m_localEnumMap != localEnumMap) {
        dptr.detach();
        dptr->m_localEnumMap = localEnumMap;
    }
}


class SimpleFileEnumMessage_QtProtobufData : public QSharedData
{
public:
    SimpleFileEnumMessage_QtProtobufData()
        : QSharedData(),
          m_globalEnum(TestEnumGadget::TestEnum::TEST_ENUM_VALUE0)
    {
    }

    SimpleFileEnumMessage_QtProtobufData(const SimpleFileEnumMessage_QtProtobufData &other)
        : QSharedData(other),
          m_globalEnum(other.m_globalEnum),
          m_globalEnumList(other.m_globalEnumList)
    {
    }

    TestEnumGadget::TestEnum m_globalEnum;
    TestEnumGadget::TestEnumRepeated m_globalEnumList;
};

SimpleFileEnumMessage::~SimpleFileEnumMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 9> qt_protobuf_SimpleFileEnumMessage_uint_data;
    const char qt_protobuf_SimpleFileEnumMessage_char_data[75];
} qt_protobuf_SimpleFileEnumMessage_metadata {
    // data
    {
        0, /* = version */
        2, /* = num fields */
        3, /* = field number offset */
        5, /* = property index offset */
        7, /* = field flags offset */
        47, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        48, /* = globalEnum */
        59, /* = globalEnumList */
        74, /* = end-of-string-marker */
        // Field numbers:
        1, /* = globalEnum */
        2, /* = globalEnumList */
        // Property indices:
        0, /* = globalEnum */
        1, /* = globalEnumList */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = globalEnum */
        QtProtobufPrivate::NoFlags, /* = globalEnumList */
    },
    // char_data
    /* metadata char_data: */
    "qtprotobufnamespace.tests.SimpleFileEnumMessage\0" /* = full message name */
    /* field char_data: */
    "globalEnum\0globalEnumList\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering SimpleFileEnumMessage::propertyOrdering = {
    &qt_protobuf_SimpleFileEnumMessage_metadata.data
};

void SimpleFileEnumMessage::registerTypes()
{
    qRegisterMetaType<SimpleFileEnumMessage>();
    qRegisterMetaType<SimpleFileEnumMessageRepeated>();
}

SimpleFileEnumMessage::SimpleFileEnumMessage()
    : QProtobufMessage(&SimpleFileEnumMessage::staticMetaObject),
      dptr(new SimpleFileEnumMessage_QtProtobufData)
{
}

SimpleFileEnumMessage::SimpleFileEnumMessage(const SimpleFileEnumMessage &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
SimpleFileEnumMessage &SimpleFileEnumMessage::operator =(const SimpleFileEnumMessage &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
SimpleFileEnumMessage::SimpleFileEnumMessage(SimpleFileEnumMessage &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
SimpleFileEnumMessage &SimpleFileEnumMessage::operator =(SimpleFileEnumMessage &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool SimpleFileEnumMessage::operator ==(const SimpleFileEnumMessage &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_globalEnum == other.dptr->m_globalEnum
        && dptr->m_globalEnumList == other.dptr->m_globalEnumList;
}

bool SimpleFileEnumMessage::operator !=(const SimpleFileEnumMessage &other) const
{
    return !this->operator ==(other);
}

TestEnumGadget::TestEnum SimpleFileEnumMessage::globalEnum() const
{
    return dptr->m_globalEnum;
}

TestEnumGadget::TestEnumRepeated SimpleFileEnumMessage::globalEnumList() const
{
    return dptr->m_globalEnumList;
}

TestEnumGadget::TestEnumRepeated &SimpleFileEnumMessage::globalEnumList()
{
    dptr.detach();
    return dptr->m_globalEnumList;
}

void SimpleFileEnumMessage::setGlobalEnum(const TestEnumGadget::TestEnum &globalEnum)
{
    if (dptr->m_globalEnum != globalEnum) {
        dptr.detach();
        dptr->m_globalEnum = globalEnum;
    }
}

void SimpleFileEnumMessage::setGlobalEnumList(const TestEnumGadget::TestEnumRepeated &globalEnumList)
{
    if (dptr->m_globalEnumList != globalEnumList) {
        dptr.detach();
        dptr->m_globalEnumList = globalEnumList;
    }
}


class StepChildEnumMessage_QtProtobufData : public QSharedData
{
public:
    StepChildEnumMessage_QtProtobufData()
        : QSharedData(),
          m_localStepChildEnum(SimpleEnumMessage::LocalEnum::LOCAL_ENUM_VALUE0)
    {
    }

    StepChildEnumMessage_QtProtobufData(const StepChildEnumMessage_QtProtobufData &other)
        : QSharedData(other),
          m_localStepChildEnum(other.m_localStepChildEnum),
          m_localStepChildList(other.m_localStepChildList)
    {
    }

    SimpleEnumMessage::LocalEnum m_localStepChildEnum;
    SimpleEnumMessage::LocalEnumRepeated m_localStepChildList;
};

StepChildEnumMessage::~StepChildEnumMessage() = default;

static constexpr struct {
    QtProtobufPrivate::QProtobufPropertyOrdering::Data data;
    const std::array<uint, 9> qt_protobuf_StepChildEnumMessage_uint_data;
    const char qt_protobuf_StepChildEnumMessage_char_data[86];
} qt_protobuf_StepChildEnumMessage_metadata {
    // data
    {
        0, /* = version */
        2, /* = num fields */
        3, /* = field number offset */
        5, /* = property index offset */
        7, /* = field flags offset */
        46, /* = message full name length */
    },
    // uint_data
    {
        // JSON name offsets:
        47, /* = localStepChildEnum */
        66, /* = localStepChildList */
        85, /* = end-of-string-marker */
        // Field numbers:
        1, /* = localStepChildEnum */
        2, /* = localStepChildList */
        // Property indices:
        0, /* = localStepChildEnum */
        1, /* = localStepChildList */
        // Field flags:
        QtProtobufPrivate::NoFlags, /* = localStepChildEnum */
        QtProtobufPrivate::NoFlags, /* = localStepChildList */
    },
    // char_data
    /* metadata char_data: */
    "qtprotobufnamespace.tests.StepChildEnumMessage\0" /* = full message name */
    /* field char_data: */
    "localStepChildEnum\0localStepChildList\0"
};

const QtProtobufPrivate::QProtobufPropertyOrdering StepChildEnumMessage::propertyOrdering = {
    &qt_protobuf_StepChildEnumMessage_metadata.data
};

void StepChildEnumMessage::registerTypes()
{
    qRegisterMetaType<StepChildEnumMessage>();
    qRegisterMetaType<StepChildEnumMessageRepeated>();
}

StepChildEnumMessage::StepChildEnumMessage()
    : QProtobufMessage(&StepChildEnumMessage::staticMetaObject),
      dptr(new StepChildEnumMessage_QtProtobufData)
{
}

StepChildEnumMessage::StepChildEnumMessage(const StepChildEnumMessage &other)
    : QProtobufMessage(other),
      dptr(other.dptr)
{
}
StepChildEnumMessage &StepChildEnumMessage::operator =(const StepChildEnumMessage &other)
{
    QProtobufMessage::operator=(other);
    dptr = other.dptr;
    return *this;
}
StepChildEnumMessage::StepChildEnumMessage(StepChildEnumMessage &&other) noexcept
    : QProtobufMessage(std::move(other)),
      dptr(std::move(other.dptr))
{
}
StepChildEnumMessage &StepChildEnumMessage::operator =(StepChildEnumMessage &&other) noexcept
{
    QProtobufMessage::operator=(std::move(other));
    dptr.swap(other.dptr);
    return *this;
}
bool StepChildEnumMessage::operator ==(const StepChildEnumMessage &other) const
{
    return QProtobufMessage::isEqual(*this, other)
        && dptr->m_localStepChildEnum == other.dptr->m_localStepChildEnum
        && dptr->m_localStepChildList == other.dptr->m_localStepChildList;
}

bool StepChildEnumMessage::operator !=(const StepChildEnumMessage &other) const
{
    return !this->operator ==(other);
}

SimpleEnumMessage::LocalEnum StepChildEnumMessage::localStepChildEnum() const
{
    return dptr->m_localStepChildEnum;
}

SimpleEnumMessage::LocalEnumRepeated StepChildEnumMessage::localStepChildList() const
{
    return dptr->m_localStepChildList;
}

SimpleEnumMessage::LocalEnumRepeated &StepChildEnumMessage::localStepChildList()
{
    dptr.detach();
    return dptr->m_localStepChildList;
}

void StepChildEnumMessage::setLocalStepChildEnum(const SimpleEnumMessage::LocalEnum &localStepChildEnum)
{
    if (dptr->m_localStepChildEnum != localStepChildEnum) {
        dptr.detach();
        dptr->m_localStepChildEnum = localStepChildEnum;
    }
}

void StepChildEnumMessage::setLocalStepChildList(const SimpleEnumMessage::LocalEnumRepeated &localStepChildList)
{
    if (dptr->m_localStepChildList != localStepChildList) {
        dptr.detach();
        dptr->m_localStepChildList = localStepChildList;
    }
}

} // namespace qtprotobufnamespace::tests

#include "moc_enummessages.qpb.cpp"
